/* tslint:disable */
/* eslint-disable */
/**
 * Application Service API
 * The application service is a layer that sits on top of the Kubernetes service and allows the provisioning of applications onto managed Kubernetes clusters. This yields a higher level PaaS solution.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationVersion } from './ApplicationVersion';
import {
    ApplicationVersionFromJSON,
    ApplicationVersionFromJSONTyped,
    ApplicationVersionToJSON,
} from './ApplicationVersion';

/**
 * An application.
 * @export
 * @interface ApplicationSpec
 */
export interface ApplicationSpec {
    /**
     * Human readable application name.
     * @type {string}
     * @memberof ApplicationSpec
     */
    humanReadableName: string;
    /**
     * Documentation link for the application.
     * @type {string}
     * @memberof ApplicationSpec
     */
    documentation: string;
    /**
     * The license under which the application is released.
     * @type {string}
     * @memberof ApplicationSpec
     */
    license: string;
    /**
     * A base64 encoded SVG icon.  This should work in both light and dark themes.
     * @type {string}
     * @memberof ApplicationSpec
     */
    icon: string;
    /**
     * A set of application versions.
     * @type {Array<ApplicationVersion>}
     * @memberof ApplicationSpec
     */
    versions: Array<ApplicationVersion>;
}

/**
 * Check if a given object implements the ApplicationSpec interface.
 */
export function instanceOfApplicationSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "humanReadableName" in value;
    isInstance = isInstance && "documentation" in value;
    isInstance = isInstance && "license" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "versions" in value;

    return isInstance;
}

export function ApplicationSpecFromJSON(json: any): ApplicationSpec {
    return ApplicationSpecFromJSONTyped(json, false);
}

export function ApplicationSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'humanReadableName': json['humanReadableName'],
        'documentation': json['documentation'],
        'license': json['license'],
        'icon': json['icon'],
        'versions': ((json['versions'] as Array<any>).map(ApplicationVersionFromJSON)),
    };
}

export function ApplicationSpecToJSON(value?: ApplicationSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'humanReadableName': value.humanReadableName,
        'documentation': value.documentation,
        'license': value.license,
        'icon': value.icon,
        'versions': ((value.versions as Array<any>).map(ApplicationVersionToJSON)),
    };
}

