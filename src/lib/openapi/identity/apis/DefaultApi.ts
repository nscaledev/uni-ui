/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Acl,
  Group,
  Groups,
  JsonWebKeySet,
  LoginRequestOptions,
  Oauth2Error,
  Oauth2Providers,
  OpenidConfiguration,
  Organization,
  Organizations,
  RoleList,
  Token,
  TokenRequestOptions,
} from '../models/index';
import {
    AclFromJSON,
    AclToJSON,
    GroupFromJSON,
    GroupToJSON,
    GroupsFromJSON,
    GroupsToJSON,
    JsonWebKeySetFromJSON,
    JsonWebKeySetToJSON,
    LoginRequestOptionsFromJSON,
    LoginRequestOptionsToJSON,
    Oauth2ErrorFromJSON,
    Oauth2ErrorToJSON,
    Oauth2ProvidersFromJSON,
    Oauth2ProvidersToJSON,
    OpenidConfigurationFromJSON,
    OpenidConfigurationToJSON,
    OrganizationFromJSON,
    OrganizationToJSON,
    OrganizationsFromJSON,
    OrganizationsToJSON,
    RoleListFromJSON,
    RoleListToJSON,
    TokenFromJSON,
    TokenToJSON,
    TokenRequestOptionsFromJSON,
    TokenRequestOptionsToJSON,
} from '../models/index';

export interface ApiV1OrganizationsOrganizationAclGetRequest {
    organization: string;
}

export interface ApiV1OrganizationsOrganizationGroupsGetRequest {
    organization: string;
}

export interface ApiV1OrganizationsOrganizationGroupsGroupidDeleteRequest {
    organization: string;
    groupid: string;
}

export interface ApiV1OrganizationsOrganizationGroupsGroupidGetRequest {
    organization: string;
    groupid: string;
}

export interface ApiV1OrganizationsOrganizationGroupsGroupidPutRequest {
    organization: string;
    groupid: string;
    group: Group;
}

export interface ApiV1OrganizationsOrganizationGroupsPostRequest {
    organization: string;
    group: Group;
}

export interface ApiV1OrganizationsOrganizationOauth2ProvidersGetRequest {
    organization: string;
}

export interface ApiV1OrganizationsOrganizationPutRequest {
    organization: string;
    organization2: Organization;
}

export interface ApiV1OrganizationsOrganizationRolesGetRequest {
    organization: string;
}

export interface ApiV1OrganizationsPostRequest {
    organization: Organization;
}

export interface Oauth2V2LoginPostRequest {
    loginRequestOptions: LoginRequestOptions;
}

export interface Oauth2V2TokenPostRequest {
    tokenRequestOptions: TokenRequestOptions | null;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns a list of organizations that are owned/managed by the user.
     */
    async apiV1OrganizationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organizations>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationsFromJSON(jsonValue));
    }

    /**
     * Returns a list of organizations that are owned/managed by the user.
     */
    async apiV1OrganizationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organizations> {
        const response = await this.apiV1OrganizationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns access control properties for the user.
     */
    async apiV1OrganizationsOrganizationAclGetRaw(requestParameters: ApiV1OrganizationsOrganizationAclGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Acl>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationAclGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}/acl`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AclFromJSON(jsonValue));
    }

    /**
     * Returns access control properties for the user.
     */
    async apiV1OrganizationsOrganizationAclGet(requestParameters: ApiV1OrganizationsOrganizationAclGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Acl> {
        const response = await this.apiV1OrganizationsOrganizationAclGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of groups that are defined for the organization.
     */
    async apiV1OrganizationsOrganizationGroupsGetRaw(requestParameters: ApiV1OrganizationsOrganizationGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Groups>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationGroupsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}/groups`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsFromJSON(jsonValue));
    }

    /**
     * Returns a list of groups that are defined for the organization.
     */
    async apiV1OrganizationsOrganizationGroupsGet(requestParameters: ApiV1OrganizationsOrganizationGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Groups> {
        const response = await this.apiV1OrganizationsOrganizationGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows the deletion of an existing group.
     */
    async apiV1OrganizationsOrganizationGroupsGroupidDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationGroupsGroupidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationGroupsGroupidDelete.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling apiV1OrganizationsOrganizationGroupsGroupidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}/groups/{groupid}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows the deletion of an existing group.
     */
    async apiV1OrganizationsOrganizationGroupsGroupidDelete(requestParameters: ApiV1OrganizationsOrganizationGroupsGroupidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationGroupsGroupidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Allows a single group to be polled.
     */
    async apiV1OrganizationsOrganizationGroupsGroupidGetRaw(requestParameters: ApiV1OrganizationsOrganizationGroupsGroupidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationGroupsGroupidGet.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling apiV1OrganizationsOrganizationGroupsGroupidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}/groups/{groupid}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Allows a single group to be polled.
     */
    async apiV1OrganizationsOrganizationGroupsGroupidGet(requestParameters: ApiV1OrganizationsOrganizationGroupsGroupidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.apiV1OrganizationsOrganizationGroupsGroupidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a group to be updated.
     */
    async apiV1OrganizationsOrganizationGroupsGroupidPutRaw(requestParameters: ApiV1OrganizationsOrganizationGroupsGroupidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationGroupsGroupidPut.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling apiV1OrganizationsOrganizationGroupsGroupidPut.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling apiV1OrganizationsOrganizationGroupsGroupidPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}/groups/{groupid}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters.group),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows a group to be updated.
     */
    async apiV1OrganizationsOrganizationGroupsGroupidPut(requestParameters: ApiV1OrganizationsOrganizationGroupsGroupidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationGroupsGroupidPutRaw(requestParameters, initOverrides);
    }

    /**
     * Allows creation of a new group.
     */
    async apiV1OrganizationsOrganizationGroupsPostRaw(requestParameters: ApiV1OrganizationsOrganizationGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationGroupsPost.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling apiV1OrganizationsOrganizationGroupsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}/groups`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters.group),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows creation of a new group.
     */
    async apiV1OrganizationsOrganizationGroupsPost(requestParameters: ApiV1OrganizationsOrganizationGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationGroupsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of identity providers, either public or owned by the organization.
     */
    async apiV1OrganizationsOrganizationOauth2ProvidersGetRaw(requestParameters: ApiV1OrganizationsOrganizationOauth2ProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Oauth2Providers>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationOauth2ProvidersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}/oauth2/providers`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Oauth2ProvidersFromJSON(jsonValue));
    }

    /**
     * Returns a list of identity providers, either public or owned by the organization.
     */
    async apiV1OrganizationsOrganizationOauth2ProvidersGet(requestParameters: ApiV1OrganizationsOrganizationOauth2ProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Oauth2Providers> {
        const response = await this.apiV1OrganizationsOrganizationOauth2ProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows an organization to be updated.
     */
    async apiV1OrganizationsOrganizationPutRaw(requestParameters: ApiV1OrganizationsOrganizationPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationPut.');
        }

        if (requestParameters.organization2 === null || requestParameters.organization2 === undefined) {
            throw new runtime.RequiredError('organization2','Required parameter requestParameters.organization2 was null or undefined when calling apiV1OrganizationsOrganizationPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationToJSON(requestParameters.organization2),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows an organization to be updated.
     */
    async apiV1OrganizationsOrganizationPut(requestParameters: ApiV1OrganizationsOrganizationPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationPutRaw(requestParameters, initOverrides);
    }

    /**
     * Returns roles that can be used by the organization.
     */
    async apiV1OrganizationsOrganizationRolesGetRaw(requestParameters: ApiV1OrganizationsOrganizationRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleList>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsOrganizationRolesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organization}/roles`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleListFromJSON(jsonValue));
    }

    /**
     * Returns roles that can be used by the organization.
     */
    async apiV1OrganizationsOrganizationRolesGet(requestParameters: ApiV1OrganizationsOrganizationRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleList> {
        const response = await this.apiV1OrganizationsOrganizationRolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows creation of an organization.
     */
    async apiV1OrganizationsPostRaw(requestParameters: ApiV1OrganizationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organization === null || requestParameters.organization === undefined) {
            throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling apiV1OrganizationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationToJSON(requestParameters.organization),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows creation of an organization.
     */
    async apiV1OrganizationsPost(requestParameters: ApiV1OrganizationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Provides authentication and authorisation as per the OAuth2 specification. This particular implementation requires a \"code\" type response, and PKCE. You may specify the \"openid\" scope in order to have an OpenID Connect identity token returned during code exchange.
     */
    async oauth2V2AuthorizationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth2/v2/authorization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides authentication and authorisation as per the OAuth2 specification. This particular implementation requires a \"code\" type response, and PKCE. You may specify the \"openid\" scope in order to have an OpenID Connect identity token returned during code exchange.
     */
    async oauth2V2AuthorizationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauth2V2AuthorizationGetRaw(initOverrides);
    }

    /**
     * Returns an array of public keys used to verify JWT tokens issued by this server, for example identity or authorisation tokens.
     */
    async oauth2V2JwksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JsonWebKeySet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth2/v2/jwks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonWebKeySetFromJSON(jsonValue));
    }

    /**
     * Returns an array of public keys used to verify JWT tokens issued by this server, for example identity or authorisation tokens.
     */
    async oauth2V2JwksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JsonWebKeySet> {
        const response = await this.oauth2V2JwksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sends the users\'s provided email address to the identity service.
     */
    async oauth2V2LoginPostRaw(requestParameters: Oauth2V2LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginRequestOptions === null || requestParameters.loginRequestOptions === undefined) {
            throw new runtime.RequiredError('loginRequestOptions','Required parameter requestParameters.loginRequestOptions was null or undefined when calling oauth2V2LoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-www-form-urlencoded';

        const response = await this.request({
            path: `/oauth2/v2/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestOptionsToJSON(requestParameters.loginRequestOptions),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sends the users\'s provided email address to the identity service.
     */
    async oauth2V2LoginPost(requestParameters: Oauth2V2LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauth2V2LoginPostRaw(requestParameters, initOverrides);
    }

    /**
     * Provides authorisation code to access token exchange as per the OAuth2 specification with the \"authorization_code\" grant. If requested during authentication, and OpenID Connect identity token will also be returned.   The \"password\" grant type is also supported for applications where using a web browser in the authentication flow would be impractical, for example with automated command line client based tooling, however this is not recommended as it exposes credentials to the API, and not only with a trusted 3rd party identity provider.
     */
    async oauth2V2TokenPostRaw(requestParameters: Oauth2V2TokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.tokenRequestOptions === null || requestParameters.tokenRequestOptions === undefined) {
            throw new runtime.RequiredError('tokenRequestOptions','Required parameter requestParameters.tokenRequestOptions was null or undefined when calling oauth2V2TokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-www-form-urlencoded';

        const response = await this.request({
            path: `/oauth2/v2/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRequestOptionsToJSON(requestParameters.tokenRequestOptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Provides authorisation code to access token exchange as per the OAuth2 specification with the \"authorization_code\" grant. If requested during authentication, and OpenID Connect identity token will also be returned.   The \"password\" grant type is also supported for applications where using a web browser in the authentication flow would be impractical, for example with automated command line client based tooling, however this is not recommended as it exposes credentials to the API, and not only with a trusted 3rd party identity provider.
     */
    async oauth2V2TokenPost(requestParameters: Oauth2V2TokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.oauth2V2TokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns introspection information about an access token.
     */
    async oauth2V2UserinfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/oauth2/v2/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns introspection information about an access token.
     */
    async oauth2V2UserinfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauth2V2UserinfoGetRaw(initOverrides);
    }

    /**
     * The Kubernetes Service OAuth2 implementation does not provide any direct authentication or authorisation.  It instead delegates to a 3rd party identity provider.  This endpoint allows a 3rd party authorisation code to be returned to the Kubernetes Service and exchanged for an identity token.
     */
    async oidcCallbackGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oidc/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The Kubernetes Service OAuth2 implementation does not provide any direct authentication or authorisation.  It instead delegates to a 3rd party identity provider.  This endpoint allows a 3rd party authorisation code to be returned to the Kubernetes Service and exchanged for an identity token.
     */
    async oidcCallbackGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcCallbackGetRaw(initOverrides);
    }

    /**
     * Reads the OIDC discovery page identifying all the required endpoints, and supported algorithms.
     */
    async wellKnownOpenidConfigurationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenidConfiguration>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/.well-known/openid-configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenidConfigurationFromJSON(jsonValue));
    }

    /**
     * Reads the OIDC discovery page identifying all the required endpoints, and supported algorithms.
     */
    async wellKnownOpenidConfigurationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenidConfiguration> {
        const response = await this.wellKnownOpenidConfigurationGetRaw(initOverrides);
        return await response.value();
    }

}
