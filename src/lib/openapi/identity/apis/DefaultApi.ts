/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Acl,
  GroupRead,
  GroupWrite,
  JsonWebKeySet,
  LoginRequestOptions,
  ModelError,
  Oauth2ProviderRead,
  Oauth2ProviderWrite,
  OpenidConfiguration,
  OrganizationRead,
  OrganizationWrite,
  ProjectRead,
  ProjectWrite,
  RoleRead,
  ServiceAccountCreate,
  ServiceAccountRead,
  ServiceAccountWrite,
  Token,
  TokenRequestOptions,
  User,
  Userinfo,
} from '../models/index';
import {
    AclFromJSON,
    AclToJSON,
    GroupReadFromJSON,
    GroupReadToJSON,
    GroupWriteFromJSON,
    GroupWriteToJSON,
    JsonWebKeySetFromJSON,
    JsonWebKeySetToJSON,
    LoginRequestOptionsFromJSON,
    LoginRequestOptionsToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    Oauth2ProviderReadFromJSON,
    Oauth2ProviderReadToJSON,
    Oauth2ProviderWriteFromJSON,
    Oauth2ProviderWriteToJSON,
    OpenidConfigurationFromJSON,
    OpenidConfigurationToJSON,
    OrganizationReadFromJSON,
    OrganizationReadToJSON,
    OrganizationWriteFromJSON,
    OrganizationWriteToJSON,
    ProjectReadFromJSON,
    ProjectReadToJSON,
    ProjectWriteFromJSON,
    ProjectWriteToJSON,
    RoleReadFromJSON,
    RoleReadToJSON,
    ServiceAccountCreateFromJSON,
    ServiceAccountCreateToJSON,
    ServiceAccountReadFromJSON,
    ServiceAccountReadToJSON,
    ServiceAccountWriteFromJSON,
    ServiceAccountWriteToJSON,
    TokenFromJSON,
    TokenToJSON,
    TokenRequestOptionsFromJSON,
    TokenRequestOptionsToJSON,
    UserFromJSON,
    UserToJSON,
    UserinfoFromJSON,
    UserinfoToJSON,
} from '../models/index';

export interface ApiV1OrganizationsOrganizationIDAclGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDGroupsGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDGroupsGroupidDeleteRequest {
    organizationID: string;
    groupid: string;
}

export interface ApiV1OrganizationsOrganizationIDGroupsGroupidGetRequest {
    organizationID: string;
    groupid: string;
}

export interface ApiV1OrganizationsOrganizationIDGroupsGroupidPutRequest {
    organizationID: string;
    groupid: string;
    groupWrite: GroupWrite;
}

export interface ApiV1OrganizationsOrganizationIDGroupsPostRequest {
    organizationID: string;
    groupWrite: GroupWrite;
}

export interface ApiV1OrganizationsOrganizationIDOauth2providersGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDOauth2providersPostRequest {
    organizationID: string;
    oauth2ProviderWrite: Oauth2ProviderWrite;
}

export interface ApiV1OrganizationsOrganizationIDOauth2providersProviderIDDeleteRequest {
    organizationID: string;
    providerID: string;
}

export interface ApiV1OrganizationsOrganizationIDOauth2providersProviderIDPutRequest {
    organizationID: string;
    providerID: string;
    oauth2ProviderWrite: Oauth2ProviderWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsPostRequest {
    organizationID: string;
    projectWrite: ProjectWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDDeleteRequest {
    organizationID: string;
    projectID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDGetRequest {
    organizationID: string;
    projectID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDPutRequest {
    organizationID: string;
    projectID: string;
    projectWrite: ProjectWrite;
}

export interface ApiV1OrganizationsOrganizationIDPutRequest {
    organizationID: string;
    organizationWrite: OrganizationWrite;
}

export interface ApiV1OrganizationsOrganizationIDRolesGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDServiceaccountsGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDServiceaccountsPostRequest {
    organizationID: string;
    serviceAccountWrite: ServiceAccountWrite;
}

export interface ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDDeleteRequest {
    organizationID: string;
    serviceAccountID: string;
}

export interface ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPutRequest {
    organizationID: string;
    serviceAccountID: string;
    serviceAccountWrite: ServiceAccountWrite;
}

export interface ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDRotatePostRequest {
    organizationID: string;
    serviceAccountID: string;
}

export interface ApiV1OrganizationsOrganizationIDUsersGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDUsersPostRequest {
    organizationID: string;
    user: User;
}

export interface ApiV1OrganizationsOrganizationIDUsersUsernameDeleteRequest {
    organizationID: string;
    username: string;
}

export interface ApiV1OrganizationsOrganizationIDUsersUsernamePutRequest {
    organizationID: string;
    username: string;
    user: User;
}

export interface ApiV1OrganizationsPostRequest {
    organizationWrite: OrganizationWrite;
}

export interface Oauth2V2LoginPostRequest {
    loginRequestOptions: LoginRequestOptions;
}

export interface Oauth2V2TokenPostRequest {
    tokenRequestOptions: TokenRequestOptions;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns access control properties for the user.
     */
    async apiV1AclGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Acl>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/acl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AclFromJSON(jsonValue));
    }

    /**
     * Returns access control properties for the user.
     */
    async apiV1AclGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Acl> {
        const response = await this.apiV1AclGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Lists system identity providers.
     */
    async apiV1Oauth2providersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Oauth2ProviderRead>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/oauth2providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(Oauth2ProviderReadFromJSON));
    }

    /**
     * Lists system identity providers.
     */
    async apiV1Oauth2providersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Oauth2ProviderRead>> {
        const response = await this.apiV1Oauth2providersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of organizations that are owned/managed by the user.
     */
    async apiV1OrganizationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganizationRead>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationReadFromJSON));
    }

    /**
     * Returns a list of organizations that are owned/managed by the user.
     */
    async apiV1OrganizationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganizationRead>> {
        const response = await this.apiV1OrganizationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns access control properties for the user.
     */
    async apiV1OrganizationsOrganizationIDAclGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDAclGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Acl>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDAclGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/acl`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AclFromJSON(jsonValue));
    }

    /**
     * Returns access control properties for the user.
     */
    async apiV1OrganizationsOrganizationIDAclGet(requestParameters: ApiV1OrganizationsOrganizationIDAclGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Acl> {
        const response = await this.apiV1OrganizationsOrganizationIDAclGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an organization.
     */
    async apiV1OrganizationsOrganizationIDGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationReadFromJSON(jsonValue));
    }

    /**
     * Get an organization.
     */
    async apiV1OrganizationsOrganizationIDGet(requestParameters: ApiV1OrganizationsOrganizationIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationRead> {
        const response = await this.apiV1OrganizationsOrganizationIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of groups that are defined for the organization.
     */
    async apiV1OrganizationsOrganizationIDGroupsGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/groups`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupReadFromJSON));
    }

    /**
     * Returns a list of groups that are defined for the organization.
     */
    async apiV1OrganizationsOrganizationIDGroupsGet(requestParameters: ApiV1OrganizationsOrganizationIDGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows the deletion of an existing group.
     */
    async apiV1OrganizationsOrganizationIDGroupsGroupidDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDGroupsGroupidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsGroupidDelete.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsGroupidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/groups/{groupid}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows the deletion of an existing group.
     */
    async apiV1OrganizationsOrganizationIDGroupsGroupidDelete(requestParameters: ApiV1OrganizationsOrganizationIDGroupsGroupidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDGroupsGroupidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Allows a single group to be polled.
     */
    async apiV1OrganizationsOrganizationIDGroupsGroupidGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDGroupsGroupidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsGroupidGet.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsGroupidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/groups/{groupid}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupReadFromJSON(jsonValue));
    }

    /**
     * Allows a single group to be polled.
     */
    async apiV1OrganizationsOrganizationIDGroupsGroupidGet(requestParameters: ApiV1OrganizationsOrganizationIDGroupsGroupidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupRead> {
        const response = await this.apiV1OrganizationsOrganizationIDGroupsGroupidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a group to be updated.
     */
    async apiV1OrganizationsOrganizationIDGroupsGroupidPutRaw(requestParameters: ApiV1OrganizationsOrganizationIDGroupsGroupidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsGroupidPut.');
        }

        if (requestParameters.groupid === null || requestParameters.groupid === undefined) {
            throw new runtime.RequiredError('groupid','Required parameter requestParameters.groupid was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsGroupidPut.');
        }

        if (requestParameters.groupWrite === null || requestParameters.groupWrite === undefined) {
            throw new runtime.RequiredError('groupWrite','Required parameter requestParameters.groupWrite was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsGroupidPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/groups/{groupid}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"groupid"}}`, encodeURIComponent(String(requestParameters.groupid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupWriteToJSON(requestParameters.groupWrite),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows a group to be updated.
     */
    async apiV1OrganizationsOrganizationIDGroupsGroupidPut(requestParameters: ApiV1OrganizationsOrganizationIDGroupsGroupidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDGroupsGroupidPutRaw(requestParameters, initOverrides);
    }

    /**
     * Allows creation of a new group.
     */
    async apiV1OrganizationsOrganizationIDGroupsPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsPost.');
        }

        if (requestParameters.groupWrite === null || requestParameters.groupWrite === undefined) {
            throw new runtime.RequiredError('groupWrite','Required parameter requestParameters.groupWrite was null or undefined when calling apiV1OrganizationsOrganizationIDGroupsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/groups`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupWriteToJSON(requestParameters.groupWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupReadFromJSON(jsonValue));
    }

    /**
     * Allows creation of a new group.
     */
    async apiV1OrganizationsOrganizationIDGroupsPost(requestParameters: ApiV1OrganizationsOrganizationIDGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupRead> {
        const response = await this.apiV1OrganizationsOrganizationIDGroupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists an organization\'s identity providers.
     */
    async apiV1OrganizationsOrganizationIDOauth2providersGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDOauth2providersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Oauth2ProviderRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDOauth2providersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/oauth2providers`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(Oauth2ProviderReadFromJSON));
    }

    /**
     * Lists an organization\'s identity providers.
     */
    async apiV1OrganizationsOrganizationIDOauth2providersGet(requestParameters: ApiV1OrganizationsOrganizationIDOauth2providersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Oauth2ProviderRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDOauth2providersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an organization\'s identity provider.
     */
    async apiV1OrganizationsOrganizationIDOauth2providersPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDOauth2providersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Oauth2ProviderRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDOauth2providersPost.');
        }

        if (requestParameters.oauth2ProviderWrite === null || requestParameters.oauth2ProviderWrite === undefined) {
            throw new runtime.RequiredError('oauth2ProviderWrite','Required parameter requestParameters.oauth2ProviderWrite was null or undefined when calling apiV1OrganizationsOrganizationIDOauth2providersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/oauth2providers`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Oauth2ProviderWriteToJSON(requestParameters.oauth2ProviderWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Oauth2ProviderReadFromJSON(jsonValue));
    }

    /**
     * Create an organization\'s identity provider.
     */
    async apiV1OrganizationsOrganizationIDOauth2providersPost(requestParameters: ApiV1OrganizationsOrganizationIDOauth2providersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Oauth2ProviderRead> {
        const response = await this.apiV1OrganizationsOrganizationIDOauth2providersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an organization\'s identity provider.
     */
    async apiV1OrganizationsOrganizationIDOauth2providersProviderIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDOauth2providersProviderIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDOauth2providersProviderIDDelete.');
        }

        if (requestParameters.providerID === null || requestParameters.providerID === undefined) {
            throw new runtime.RequiredError('providerID','Required parameter requestParameters.providerID was null or undefined when calling apiV1OrganizationsOrganizationIDOauth2providersProviderIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/oauth2providers/{providerID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"providerID"}}`, encodeURIComponent(String(requestParameters.providerID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an organization\'s identity provider.
     */
    async apiV1OrganizationsOrganizationIDOauth2providersProviderIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDOauth2providersProviderIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDOauth2providersProviderIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update an organization\'s identity provider.
     */
    async apiV1OrganizationsOrganizationIDOauth2providersProviderIDPutRaw(requestParameters: ApiV1OrganizationsOrganizationIDOauth2providersProviderIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDOauth2providersProviderIDPut.');
        }

        if (requestParameters.providerID === null || requestParameters.providerID === undefined) {
            throw new runtime.RequiredError('providerID','Required parameter requestParameters.providerID was null or undefined when calling apiV1OrganizationsOrganizationIDOauth2providersProviderIDPut.');
        }

        if (requestParameters.oauth2ProviderWrite === null || requestParameters.oauth2ProviderWrite === undefined) {
            throw new runtime.RequiredError('oauth2ProviderWrite','Required parameter requestParameters.oauth2ProviderWrite was null or undefined when calling apiV1OrganizationsOrganizationIDOauth2providersProviderIDPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/oauth2providers/{providerID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"providerID"}}`, encodeURIComponent(String(requestParameters.providerID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: Oauth2ProviderWriteToJSON(requestParameters.oauth2ProviderWrite),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an organization\'s identity provider.
     */
    async apiV1OrganizationsOrganizationIDOauth2providersProviderIDPut(requestParameters: ApiV1OrganizationsOrganizationIDOauth2providersProviderIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDOauth2providersProviderIDPutRaw(requestParameters, initOverrides);
    }

    /**
     * List all projects for the organization.
     */
    async apiV1OrganizationsOrganizationIDProjectsGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectReadFromJSON));
    }

    /**
     * List all projects for the organization.
     */
    async apiV1OrganizationsOrganizationIDProjectsGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new project resource for the user\'s organization.
     */
    async apiV1OrganizationsOrganizationIDProjectsPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsPost.');
        }

        if (requestParameters.projectWrite === null || requestParameters.projectWrite === undefined) {
            throw new runtime.RequiredError('projectWrite','Required parameter requestParameters.projectWrite was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectWriteToJSON(requestParameters.projectWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectReadFromJSON(jsonValue));
    }

    /**
     * Creates a new project resource for the user\'s organization.
     */
    async apiV1OrganizationsOrganizationIDProjectsPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the project associated with the authenticated user\'s scoped authorisation token. This is a cascading operation and will delete all contained cluster managers and clusters.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDDelete.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the project associated with the authenticated user\'s scoped authorisation token. This is a cascading operation and will delete all contained cluster managers and clusters.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a project.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectReadFromJSON(jsonValue));
    }

    /**
     * Gets a project.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a project.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDPutRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDPut.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDPut.');
        }

        if (requestParameters.projectWrite === null || requestParameters.projectWrite === undefined) {
            throw new runtime.RequiredError('projectWrite','Required parameter requestParameters.projectWrite was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectWriteToJSON(requestParameters.projectWrite),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a project.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDPut(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDPutRaw(requestParameters, initOverrides);
    }

    /**
     * Allows an organization to be updated.
     */
    async apiV1OrganizationsOrganizationIDPutRaw(requestParameters: ApiV1OrganizationsOrganizationIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDPut.');
        }

        if (requestParameters.organizationWrite === null || requestParameters.organizationWrite === undefined) {
            throw new runtime.RequiredError('organizationWrite','Required parameter requestParameters.organizationWrite was null or undefined when calling apiV1OrganizationsOrganizationIDPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationWriteToJSON(requestParameters.organizationWrite),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Allows an organization to be updated.
     */
    async apiV1OrganizationsOrganizationIDPut(requestParameters: ApiV1OrganizationsOrganizationIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDPutRaw(requestParameters, initOverrides);
    }

    /**
     * Returns roles that can be used by the organization.
     */
    async apiV1OrganizationsOrganizationIDRolesGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDRolesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/roles`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleReadFromJSON));
    }

    /**
     * Returns roles that can be used by the organization.
     */
    async apiV1OrganizationsOrganizationIDRolesGet(requestParameters: ApiV1OrganizationsOrganizationIDRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDRolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all service accounts.
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceAccountRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/serviceaccounts`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceAccountReadFromJSON));
    }

    /**
     * Lists all service accounts.
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsGet(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceAccountRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDServiceaccountsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new service account and returns an access token,
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccountCreate>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsPost.');
        }

        if (requestParameters.serviceAccountWrite === null || requestParameters.serviceAccountWrite === undefined) {
            throw new runtime.RequiredError('serviceAccountWrite','Required parameter requestParameters.serviceAccountWrite was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/serviceaccounts`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountWriteToJSON(requestParameters.serviceAccountWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountCreateFromJSON(jsonValue));
    }

    /**
     * Creates a new service account and returns an access token,
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsPost(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccountCreate> {
        const response = await this.apiV1OrganizationsOrganizationIDServiceaccountsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a service account and revokes an access token.
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDDelete.');
        }

        if (requestParameters.serviceAccountID === null || requestParameters.serviceAccountID === undefined) {
            throw new runtime.RequiredError('serviceAccountID','Required parameter requestParameters.serviceAccountID was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/serviceaccounts/{serviceAccountID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"serviceAccountID"}}`, encodeURIComponent(String(requestParameters.serviceAccountID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a service account and revokes an access token.
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a service account.
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPutRaw(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccountRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPut.');
        }

        if (requestParameters.serviceAccountID === null || requestParameters.serviceAccountID === undefined) {
            throw new runtime.RequiredError('serviceAccountID','Required parameter requestParameters.serviceAccountID was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPut.');
        }

        if (requestParameters.serviceAccountWrite === null || requestParameters.serviceAccountWrite === undefined) {
            throw new runtime.RequiredError('serviceAccountWrite','Required parameter requestParameters.serviceAccountWrite was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/serviceaccounts/{serviceAccountID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"serviceAccountID"}}`, encodeURIComponent(String(requestParameters.serviceAccountID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountWriteToJSON(requestParameters.serviceAccountWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountReadFromJSON(jsonValue));
    }

    /**
     * Updates a service account.
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPut(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccountRead> {
        const response = await this.apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rotates a service account\'s access token.
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDRotatePostRaw(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDRotatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceAccountCreate>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDRotatePost.');
        }

        if (requestParameters.serviceAccountID === null || requestParameters.serviceAccountID === undefined) {
            throw new runtime.RequiredError('serviceAccountID','Required parameter requestParameters.serviceAccountID was null or undefined when calling apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDRotatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/serviceaccounts/{serviceAccountID}/rotate`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"serviceAccountID"}}`, encodeURIComponent(String(requestParameters.serviceAccountID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountCreateFromJSON(jsonValue));
    }

    /**
     * Rotates a service account\'s access token.
     */
    async apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDRotatePost(requestParameters: ApiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDRotatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceAccountCreate> {
        const response = await this.apiV1OrganizationsOrganizationIDServiceaccountsServiceAccountIDRotatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all users.
     */
    async apiV1OrganizationsOrganizationIDUsersGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDUsersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/users`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Lists all users.
     */
    async apiV1OrganizationsOrganizationIDUsersGet(requestParameters: ApiV1OrganizationsOrganizationIDUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.apiV1OrganizationsOrganizationIDUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new user and associates with a set of groups.
     */
    async apiV1OrganizationsOrganizationIDUsersPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDUsersPost.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling apiV1OrganizationsOrganizationIDUsersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/users`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Creates a new user and associates with a set of groups.
     */
    async apiV1OrganizationsOrganizationIDUsersPost(requestParameters: ApiV1OrganizationsOrganizationIDUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiV1OrganizationsOrganizationIDUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a user and disassociates them with all groups they are a member of.
     */
    async apiV1OrganizationsOrganizationIDUsersUsernameDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDUsersUsernameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDUsersUsernameDelete.');
        }

        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling apiV1OrganizationsOrganizationIDUsersUsernameDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/users/{username}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a user and disassociates them with all groups they are a member of.
     */
    async apiV1OrganizationsOrganizationIDUsersUsernameDelete(requestParameters: ApiV1OrganizationsOrganizationIDUsersUsernameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDUsersUsernameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a user.
     */
    async apiV1OrganizationsOrganizationIDUsersUsernamePutRaw(requestParameters: ApiV1OrganizationsOrganizationIDUsersUsernamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDUsersUsernamePut.');
        }

        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling apiV1OrganizationsOrganizationIDUsersUsernamePut.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling apiV1OrganizationsOrganizationIDUsersUsernamePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/users/{username}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Updates a user.
     */
    async apiV1OrganizationsOrganizationIDUsersUsernamePut(requestParameters: ApiV1OrganizationsOrganizationIDUsersUsernamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.apiV1OrganizationsOrganizationIDUsersUsernamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows creation of a new organization. This is only available when authenticateUnknownUsers is true.
     */
    async apiV1OrganizationsPostRaw(requestParameters: ApiV1OrganizationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganizationRead>> {
        if (requestParameters.organizationWrite === null || requestParameters.organizationWrite === undefined) {
            throw new runtime.RequiredError('organizationWrite','Required parameter requestParameters.organizationWrite was null or undefined when calling apiV1OrganizationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationWriteToJSON(requestParameters.organizationWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationReadFromJSON(jsonValue));
    }

    /**
     * Allows creation of a new organization. This is only available when authenticateUnknownUsers is true.
     */
    async apiV1OrganizationsPost(requestParameters: ApiV1OrganizationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganizationRead> {
        const response = await this.apiV1OrganizationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides authentication and authorisation as per the OAuth2 specification. This particular implementation requires a \"code\" type response, and PKCE. You may specify the \"openid\" scope in order to have an OpenID Connect identity token returned during code exchange.
     */
    async oauth2V2AuthorizationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth2/v2/authorization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provides authentication and authorisation as per the OAuth2 specification. This particular implementation requires a \"code\" type response, and PKCE. You may specify the \"openid\" scope in order to have an OpenID Connect identity token returned during code exchange.
     */
    async oauth2V2AuthorizationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauth2V2AuthorizationGetRaw(initOverrides);
    }

    /**
     * Returns an array of public keys used to verify JWT tokens issued by this server, for example identity or authorisation tokens.
     */
    async oauth2V2JwksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JsonWebKeySet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oauth2/v2/jwks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonWebKeySetFromJSON(jsonValue));
    }

    /**
     * Returns an array of public keys used to verify JWT tokens issued by this server, for example identity or authorisation tokens.
     */
    async oauth2V2JwksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JsonWebKeySet> {
        const response = await this.oauth2V2JwksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Sends the users\'s provided email address to the identity service.
     */
    async oauth2V2LoginPostRaw(requestParameters: Oauth2V2LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginRequestOptions === null || requestParameters.loginRequestOptions === undefined) {
            throw new runtime.RequiredError('loginRequestOptions','Required parameter requestParameters.loginRequestOptions was null or undefined when calling oauth2V2LoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-www-form-urlencoded';

        const response = await this.request({
            path: `/oauth2/v2/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestOptionsToJSON(requestParameters.loginRequestOptions),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sends the users\'s provided email address to the identity service.
     */
    async oauth2V2LoginPost(requestParameters: Oauth2V2LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oauth2V2LoginPostRaw(requestParameters, initOverrides);
    }

    /**
     * Provides authorisation code to access token exchange as per the OAuth2 specification with the \"authorization_code\" grant. If requested during authentication, and OpenID Connect identity token will also be returned.   The \"password\" grant type is also supported for applications where using a web browser in the authentication flow would be impractical, for example with automated command line client based tooling, however this is not recommended as it exposes credentials to the API, and not only with a trusted 3rd party identity provider.
     */
    async oauth2V2TokenPostRaw(requestParameters: Oauth2V2TokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.tokenRequestOptions === null || requestParameters.tokenRequestOptions === undefined) {
            throw new runtime.RequiredError('tokenRequestOptions','Required parameter requestParameters.tokenRequestOptions was null or undefined when calling oauth2V2TokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-www-form-urlencoded';

        const response = await this.request({
            path: `/oauth2/v2/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRequestOptionsToJSON(requestParameters.tokenRequestOptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Provides authorisation code to access token exchange as per the OAuth2 specification with the \"authorization_code\" grant. If requested during authentication, and OpenID Connect identity token will also be returned.   The \"password\" grant type is also supported for applications where using a web browser in the authentication flow would be impractical, for example with automated command line client based tooling, however this is not recommended as it exposes credentials to the API, and not only with a trusted 3rd party identity provider.
     */
    async oauth2V2TokenPost(requestParameters: Oauth2V2TokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.oauth2V2TokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns introspection information about an access token.
     */
    async oauth2V2UserinfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Userinfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/oauth2/v2/userinfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserinfoFromJSON(jsonValue));
    }

    /**
     * Returns introspection information about an access token.
     */
    async oauth2V2UserinfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Userinfo> {
        const response = await this.oauth2V2UserinfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * The Kubernetes Service OAuth2 implementation does not provide any direct authentication or authorisation.  It instead delegates to a 3rd party identity provider.  This endpoint allows a 3rd party authorisation code to be returned to the Kubernetes Service and exchanged for an identity token.
     */
    async oidcCallbackGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/oidc/callback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The Kubernetes Service OAuth2 implementation does not provide any direct authentication or authorisation.  It instead delegates to a 3rd party identity provider.  This endpoint allows a 3rd party authorisation code to be returned to the Kubernetes Service and exchanged for an identity token.
     */
    async oidcCallbackGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.oidcCallbackGetRaw(initOverrides);
    }

    /**
     * Reads the OIDC discovery page identifying all the required endpoints, and supported algorithms.
     */
    async wellKnownOpenidConfigurationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenidConfiguration>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/.well-known/openid-configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenidConfigurationFromJSON(jsonValue));
    }

    /**
     * Reads the OIDC discovery page identifying all the required endpoints, and supported algorithms.
     */
    async wellKnownOpenidConfigurationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenidConfiguration> {
        const response = await this.wellKnownOpenidConfigurationGetRaw(initOverrides);
        return await response.value();
    }

}
