/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A single quota but taking into account dynamic allocation.
 * @export
 * @interface ResourceAllocation
 */
export interface ResourceAllocation {
    /**
     * The kind of resource.
     * @type {string}
     * @memberof ResourceAllocation
     */
    kind: string;
    /**
     * Tha amount of that resource always in use.
     * @type {number}
     * @memberof ResourceAllocation
     */
    committed: number;
    /**
     * The amount of that resource that may be used e.g. autoscaled.
     * @type {number}
     * @memberof ResourceAllocation
     */
    reserved: number;
}

/**
 * Check if a given object implements the ResourceAllocation interface.
 */
export function instanceOfResourceAllocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "committed" in value;
    isInstance = isInstance && "reserved" in value;

    return isInstance;
}

export function ResourceAllocationFromJSON(json: any): ResourceAllocation {
    return ResourceAllocationFromJSONTyped(json, false);
}

export function ResourceAllocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceAllocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kind': json['kind'],
        'committed': json['committed'],
        'reserved': json['reserved'],
    };
}

export function ResourceAllocationToJSON(value?: ResourceAllocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kind': value.kind,
        'committed': value.committed,
        'reserved': value.reserved,
    };
}

