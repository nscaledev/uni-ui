/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An access control scope.
 * @export
 * @interface AclScope
 */
export interface AclScope {
    /**
     * The scope name
     * @type {string}
     * @memberof AclScope
     */
    name: string;
    /**
     * A list of access control permissions.
     * @type {Array<string>}
     * @memberof AclScope
     */
    permissions: Array<AclScopePermissionsEnum>;
}


/**
 * @export
 */
export const AclScopePermissionsEnum = {
    Create: 'create',
    Read: 'read',
    Update: 'update',
    Delete: 'delete'
} as const;
export type AclScopePermissionsEnum = typeof AclScopePermissionsEnum[keyof typeof AclScopePermissionsEnum];


/**
 * Check if a given object implements the AclScope interface.
 */
export function instanceOfAclScope(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "permissions" in value;

    return isInstance;
}

export function AclScopeFromJSON(json: any): AclScope {
    return AclScopeFromJSONTyped(json, false);
}

export function AclScopeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AclScope {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'permissions': json['permissions'],
    };
}

export function AclScopeToJSON(value?: AclScope | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'permissions': value.permissions,
    };
}

