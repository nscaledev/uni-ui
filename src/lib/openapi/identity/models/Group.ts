/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProviderGroupList } from './ProviderGroupList';
import {
    ProviderGroupListFromJSON,
    ProviderGroupListFromJSONTyped,
    ProviderGroupListToJSON,
} from './ProviderGroupList';
import type { RoleList } from './RoleList';
import {
    RoleListFromJSON,
    RoleListFromJSONTyped,
    RoleListToJSON,
} from './RoleList';
import type { UserList } from './UserList';
import {
    UserListFromJSON,
    UserListFromJSONTyped,
    UserListToJSON,
} from './UserList';

/**
 * A group.
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * An immutable group ID.
     * @type {string}
     * @memberof Group
     */
    id: string;
    /**
     * The group name.
     * @type {string}
     * @memberof Group
     */
    name: string;
    /**
     * 
     * @type {UserList}
     * @memberof Group
     */
    users?: UserList;
    /**
     * 
     * @type {RoleList}
     * @memberof Group
     */
    roles: RoleList;
    /**
     * 
     * @type {ProviderGroupList}
     * @memberof Group
     */
    providerGroups?: ProviderGroupList;
}

/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "roles" in value;

    return isInstance;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'users': !exists(json, 'users') ? undefined : UserListFromJSON(json['users']),
        'roles': RoleListFromJSON(json['roles']),
        'providerGroups': !exists(json, 'providerGroups') ? undefined : ProviderGroupListFromJSON(json['providerGroups']),
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'users': UserListToJSON(value.users),
        'roles': RoleListToJSON(value.roles),
        'providerGroups': ProviderGroupListToJSON(value.providerGroups),
    };
}

