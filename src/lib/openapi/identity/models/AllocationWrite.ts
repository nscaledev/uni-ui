/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AllocationSpec } from './AllocationSpec';
import {
    AllocationSpecFromJSON,
    AllocationSpecFromJSONTyped,
    AllocationSpecToJSON,
} from './AllocationSpec';
import type { ResourceWriteMetadata } from './ResourceWriteMetadata';
import {
    ResourceWriteMetadataFromJSON,
    ResourceWriteMetadataFromJSONTyped,
    ResourceWriteMetadataToJSON,
} from './ResourceWriteMetadata';

/**
 * An allocation of resources.
 * @export
 * @interface AllocationWrite
 */
export interface AllocationWrite {
    /**
     * 
     * @type {ResourceWriteMetadata}
     * @memberof AllocationWrite
     */
    metadata: ResourceWriteMetadata;
    /**
     * 
     * @type {AllocationSpec}
     * @memberof AllocationWrite
     */
    spec: AllocationSpec;
}

/**
 * Check if a given object implements the AllocationWrite interface.
 */
export function instanceOfAllocationWrite(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "spec" in value;

    return isInstance;
}

export function AllocationWriteFromJSON(json: any): AllocationWrite {
    return AllocationWriteFromJSONTyped(json, false);
}

export function AllocationWriteFromJSONTyped(json: any, ignoreDiscriminator: boolean): AllocationWrite {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': ResourceWriteMetadataFromJSON(json['metadata']),
        'spec': AllocationSpecFromJSON(json['spec']),
    };
}

export function AllocationWriteToJSON(value?: AllocationWrite | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': ResourceWriteMetadataToJSON(value.metadata),
        'spec': AllocationSpecToJSON(value.spec),
    };
}

