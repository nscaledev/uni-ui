/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Access token introspection data.
 * @export
 * @interface Userinfo
 */
export interface Userinfo {
    /**
     * The access token's subject.
     * @type {string}
     * @memberof Userinfo
     */
    sub: string;
    /**
     * The user's email address.
     * @type {string}
     * @memberof Userinfo
     */
    email?: string;
    /**
     * Whether the email address has been verified.
     * @type {boolean}
     * @memberof Userinfo
     */
    emailVerified?: boolean;
    /**
     * The user's full name.
     * @type {string}
     * @memberof Userinfo
     */
    name?: string;
    /**
     * The user's forename.
     * @type {string}
     * @memberof Userinfo
     */
    givenName?: string;
    /**
     * The user's surname.
     * @type {string}
     * @memberof Userinfo
     */
    familyName?: string;
    /**
     * The user's middle name(s).
     * @type {string}
     * @memberof Userinfo
     */
    middleName?: string;
    /**
     * The user's nickname.
     * @type {string}
     * @memberof Userinfo
     */
    nickname?: string;
    /**
     * How the user chooses to be addressed.
     * @type {string}
     * @memberof Userinfo
     */
    preferredUsername?: string;
    /**
     * URL to the user's profile page.
     * @type {string}
     * @memberof Userinfo
     */
    profile?: string;
    /**
     * URL to the user's picture.
     * @type {string}
     * @memberof Userinfo
     */
    picture?: string;
    /**
     * URL to the user's website.
     * @type {string}
     * @memberof Userinfo
     */
    website?: string;
    /**
     * The user's gender.
     * @type {string}
     * @memberof Userinfo
     */
    gender?: string;
    /**
     * The users' birth date formatted according to ISO8601.  The year portion may be 0000 if they choose not to reveal they are really old.
     * @type {Date}
     * @memberof Userinfo
     */
    birthdate?: Date;
    /**
     * The user's IANA assigned timezone.
     * @type {string}
     * @memberof Userinfo
     */
    zoneinfo?: string;
    /**
     * The user's RFC5646 language tag.
     * @type {string}
     * @memberof Userinfo
     */
    locale?: string;
    /**
     * Then the user's profile was last updated.
     * @type {string}
     * @memberof Userinfo
     */
    updatedAt?: string;
}

/**
 * Check if a given object implements the Userinfo interface.
 */
export function instanceOfUserinfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sub" in value;

    return isInstance;
}

export function UserinfoFromJSON(json: any): Userinfo {
    return UserinfoFromJSONTyped(json, false);
}

export function UserinfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): Userinfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sub': json['sub'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'emailVerified': !exists(json, 'email_verified') ? undefined : json['email_verified'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'givenName': !exists(json, 'given_name') ? undefined : json['given_name'],
        'familyName': !exists(json, 'family_name') ? undefined : json['family_name'],
        'middleName': !exists(json, 'middle_name') ? undefined : json['middle_name'],
        'nickname': !exists(json, 'nickname') ? undefined : json['nickname'],
        'preferredUsername': !exists(json, 'preferred_username') ? undefined : json['preferred_username'],
        'profile': !exists(json, 'profile') ? undefined : json['profile'],
        'picture': !exists(json, 'picture') ? undefined : json['picture'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'birthdate': !exists(json, 'birthdate') ? undefined : (new Date(json['birthdate'])),
        'zoneinfo': !exists(json, 'zoneinfo') ? undefined : json['zoneinfo'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
    };
}

export function UserinfoToJSON(value?: Userinfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sub': value.sub,
        'email': value.email,
        'email_verified': value.emailVerified,
        'name': value.name,
        'given_name': value.givenName,
        'family_name': value.familyName,
        'middle_name': value.middleName,
        'nickname': value.nickname,
        'preferred_username': value.preferredUsername,
        'profile': value.profile,
        'picture': value.picture,
        'website': value.website,
        'gender': value.gender,
        'birthdate': value.birthdate === undefined ? undefined : (value.birthdate.toISOString()),
        'zoneinfo': value.zoneinfo,
        'locale': value.locale,
        'updated_at': value.updatedAt,
    };
}

