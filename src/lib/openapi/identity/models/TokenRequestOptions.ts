/* tslint:disable */
/* eslint-disable */
/**
 * Identity API
 * The Identity API provides an OIDC compliant interface for use with all official and 3rd party services and proxies.  As its intended use is for multi-tenant cloud deployments, it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.  Token introspection forms the basis of role based access control across all APIs.  For security purposes, access tokens and refresh tokens are limited to a single session per client, thus if they are being consumed by a horizontally scalable platform care must be taken to ensure token rotation is handled atomically by a single process, and the tokens are distributed to each service instance synchronously.
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * OAuth 2.0 token request.
 * @export
 * @interface TokenRequestOptions
 */
export interface TokenRequestOptions {
    /**
     * Supported grant type.  Must be either "code", "refresh_token" or "client_credentials".
     * @type {string}
     * @memberof TokenRequestOptions
     */
    grantType: string;
    /**
     * Authorization code. Required with the "code" grant type.
     * @type {string}
     * @memberof TokenRequestOptions
     */
    code?: string | null;
    /**
     * Client ID. Required with the "code" and "refresh_token" grant types.
     * @type {string}
     * @memberof TokenRequestOptions
     */
    clientId?: string | null;
    /**
     * Client secret. Required with the "code" and "refresh_token" grant types.
     * @type {string}
     * @memberof TokenRequestOptions
     */
    clientSecret?: string | null;
    /**
     * Client redirect URI. Required with the "code" grant type.
     * @type {string}
     * @memberof TokenRequestOptions
     */
    redirectUri?: string | null;
    /**
     * Client code verifier.
     * @type {string}
     * @memberof TokenRequestOptions
     */
    codeVerifier?: string | null;
    /**
     * A refresh token for the "refresh_token" grant type.
     * @type {string}
     * @memberof TokenRequestOptions
     */
    refreshToken?: string | null;
}

/**
 * Check if a given object implements the TokenRequestOptions interface.
 */
export function instanceOfTokenRequestOptions(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "grantType" in value;

    return isInstance;
}

export function TokenRequestOptionsFromJSON(json: any): TokenRequestOptions {
    return TokenRequestOptionsFromJSONTyped(json, false);
}

export function TokenRequestOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenRequestOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'grantType': json['grant_type'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'clientId': !exists(json, 'client_id') ? undefined : json['client_id'],
        'clientSecret': !exists(json, 'client_secret') ? undefined : json['client_secret'],
        'redirectUri': !exists(json, 'redirect_uri') ? undefined : json['redirect_uri'],
        'codeVerifier': !exists(json, 'code_verifier') ? undefined : json['code_verifier'],
        'refreshToken': !exists(json, 'refresh_token') ? undefined : json['refresh_token'],
    };
}

export function TokenRequestOptionsToJSON(value?: TokenRequestOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'grant_type': value.grantType,
        'code': value.code,
        'client_id': value.clientId,
        'client_secret': value.clientSecret,
        'redirect_uri': value.redirectUri,
        'code_verifier': value.codeVerifier,
        'refresh_token': value.refreshToken,
    };
}

