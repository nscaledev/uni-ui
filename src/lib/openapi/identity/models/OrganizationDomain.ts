/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProviderScope } from './ProviderScope';
import {
    ProviderScopeFromJSON,
    ProviderScopeFromJSONTyped,
    ProviderScopeToJSON,
} from './ProviderScope';
import type { ProviderSpecGoogle } from './ProviderSpecGoogle';
import {
    ProviderSpecGoogleFromJSON,
    ProviderSpecGoogleFromJSONTyped,
    ProviderSpecGoogleToJSON,
} from './ProviderSpecGoogle';

/**
 * An organization's domain configuration.
 * @export
 * @interface OrganizationDomain
 */
export interface OrganizationDomain {
    /**
     * The email domain of the organization.
     * @type {string}
     * @memberof OrganizationDomain
     */
    domain: string;
    /**
     * 
     * @type {ProviderScope}
     * @memberof OrganizationDomain
     */
    providerScope: ProviderScope;
    /**
     * The name of the provider to use, the scope is determined by useCustomProvider.
     * If false, this refers to a built in provider, if true, then to an organization
     * specific one.
     * @type {string}
     * @memberof OrganizationDomain
     */
    providerName: string;
    /**
     * 
     * @type {ProviderSpecGoogle}
     * @memberof OrganizationDomain
     */
    google?: ProviderSpecGoogle;
}

/**
 * Check if a given object implements the OrganizationDomain interface.
 */
export function instanceOfOrganizationDomain(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "providerScope" in value;
    isInstance = isInstance && "providerName" in value;

    return isInstance;
}

export function OrganizationDomainFromJSON(json: any): OrganizationDomain {
    return OrganizationDomainFromJSONTyped(json, false);
}

export function OrganizationDomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationDomain {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'domain': json['domain'],
        'providerScope': ProviderScopeFromJSON(json['providerScope']),
        'providerName': json['providerName'],
        'google': !exists(json, 'google') ? undefined : ProviderSpecGoogleFromJSON(json['google']),
    };
}

export function OrganizationDomainToJSON(value?: OrganizationDomain | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'domain': value.domain,
        'providerScope': ProviderScopeToJSON(value.providerScope),
        'providerName': value.providerName,
        'google': ProviderSpecGoogleToJSON(value.google),
    };
}

