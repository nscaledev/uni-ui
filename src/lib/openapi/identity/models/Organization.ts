/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrganizationType } from './OrganizationType';
import {
    OrganizationTypeFromJSON,
    OrganizationTypeFromJSONTyped,
    OrganizationTypeToJSON,
} from './OrganizationType';
import type { ProviderScope } from './ProviderScope';
import {
    ProviderScopeFromJSON,
    ProviderScopeFromJSONTyped,
    ProviderScopeToJSON,
} from './ProviderScope';

/**
 * An organization.
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * A unique organization name.
     * @type {string}
     * @memberof Organization
     */
    name: string;
    /**
     * 
     * @type {OrganizationType}
     * @memberof Organization
     */
    organizationType: OrganizationType;
    /**
     * The email domain of the organization.
     * @type {string}
     * @memberof Organization
     */
    domain?: string;
    /**
     * 
     * @type {ProviderScope}
     * @memberof Organization
     */
    providerScope?: ProviderScope;
    /**
     * The name of the provider to use, the scope is determined by useCustomProvider.
     * If false, this refers to a built in provider, if true, then to an organization
     * specific one.
     * @type {string}
     * @memberof Organization
     */
    providerName?: string;
    /**
     * When set this identifies the customer ID for the google managed organization.
     * This enables the access to, and use of, Google groups as a source of truth
     * for RBAC.
     * @type {string}
     * @memberof Organization
     */
    googleCustomerID?: string;
}

/**
 * Check if a given object implements the Organization interface.
 */
export function instanceOfOrganization(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "organizationType" in value;

    return isInstance;
}

export function OrganizationFromJSON(json: any): Organization {
    return OrganizationFromJSONTyped(json, false);
}

export function OrganizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Organization {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'organizationType': OrganizationTypeFromJSON(json['organizationType']),
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'providerScope': !exists(json, 'providerScope') ? undefined : ProviderScopeFromJSON(json['providerScope']),
        'providerName': !exists(json, 'providerName') ? undefined : json['providerName'],
        'googleCustomerID': !exists(json, 'googleCustomerID') ? undefined : json['googleCustomerID'],
    };
}

export function OrganizationToJSON(value?: Organization | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'organizationType': OrganizationTypeToJSON(value.organizationType),
        'domain': value.domain,
        'providerScope': ProviderScopeToJSON(value.providerScope),
        'providerName': value.providerName,
        'googleCustomerID': value.googleCustomerID,
    };
}

