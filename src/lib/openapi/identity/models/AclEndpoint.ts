/* tslint:disable */
/* eslint-disable */
/**
 * Identity API
 * The Identity API provides an OIDC compliant interface for use with all official and 3rd party services and proxies.  As its intended use is for multi-tenant cloud deployments, it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.  Token introspection forms the basis of role based access control across all APIs.  For security purposes, access tokens and refresh tokens are limited to a single session per client, thus if they are being consumed by a horizontally scalable platform care must be taken to ensure token rotation is handled atomically by a single process, and the tokens are distributed to each service instance synchronously.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AclOperation } from './AclOperation';
import {
    AclOperationFromJSON,
    AclOperationFromJSONTyped,
    AclOperationToJSON,
} from './AclOperation';

/**
 * A set of access control permissions for a resource type.
 * @export
 * @interface AclEndpoint
 */
export interface AclEndpoint {
    /**
     * The resource name
     * @type {string}
     * @memberof AclEndpoint
     */
    name: string;
    /**
     * A list of access control operations.
     * @type {Array<AclOperation>}
     * @memberof AclEndpoint
     */
    operations: Array<AclOperation>;
}

/**
 * Check if a given object implements the AclEndpoint interface.
 */
export function instanceOfAclEndpoint(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "operations" in value;

    return isInstance;
}

export function AclEndpointFromJSON(json: any): AclEndpoint {
    return AclEndpointFromJSONTyped(json, false);
}

export function AclEndpointFromJSONTyped(json: any, ignoreDiscriminator: boolean): AclEndpoint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'operations': ((json['operations'] as Array<any>).map(AclOperationFromJSON)),
    };
}

export function AclEndpointToJSON(value?: AclEndpoint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'operations': ((value.operations as Array<any>).map(AclOperationToJSON)),
    };
}

