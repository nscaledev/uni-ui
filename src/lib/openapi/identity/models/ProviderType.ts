/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * The provider type.  Note that we make 'none' and 'custom' explict values
 * here so we can make the type required in the API.  This makes writing UX a lot
 * easier rather than implicitly having to handle special options.  When a domain
 * is not 'none' then the provider name, that must already exist, and domain must
 * be specified to provide routing to the correct identity provider for all users
 * in that domain.
 * @export
 */
export const ProviderType = {
    None: 'none',
    Google: 'google',
    Microsoft: 'microsoft',
    Custom: 'custom'
} as const;
export type ProviderType = typeof ProviderType[keyof typeof ProviderType];


export function ProviderTypeFromJSON(json: any): ProviderType {
    return ProviderTypeFromJSONTyped(json, false);
}

export function ProviderTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProviderType {
    return json as ProviderType;
}

export function ProviderTypeToJSON(value?: ProviderType | null): any {
    return value as any;
}

