/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Oauth2 token result.
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * How the access token is to be presented to the resource server.
     * @type {string}
     * @memberof Token
     */
    tokenType: string;
    /**
     * The opaque access token.
     * @type {string}
     * @memberof Token
     */
    accessToken: string;
    /**
     * The opaque refresh token.
     * @type {string}
     * @memberof Token
     */
    refreshToken: string;
    /**
     * An OIDC ID token.
     * @type {string}
     * @memberof Token
     */
    idToken?: string;
    /**
     * The time in seconds the token will last for.
     * @type {number}
     * @memberof Token
     */
    expiresIn: number;
}

/**
 * Check if a given object implements the Token interface.
 */
export function instanceOfToken(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "tokenType" in value;
    isInstance = isInstance && "accessToken" in value;
    isInstance = isInstance && "refreshToken" in value;
    isInstance = isInstance && "expiresIn" in value;

    return isInstance;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tokenType': json['token_type'],
        'accessToken': json['access_token'],
        'refreshToken': json['refresh_token'],
        'idToken': !exists(json, 'id_token') ? undefined : json['id_token'],
        'expiresIn': json['expires_in'],
    };
}

export function TokenToJSON(value?: Token | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'token_type': value.tokenType,
        'access_token': value.accessToken,
        'refresh_token': value.refreshToken,
        'id_token': value.idToken,
        'expires_in': value.expiresIn,
    };
}

