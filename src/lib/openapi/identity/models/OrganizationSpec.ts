/* tslint:disable */
/* eslint-disable */
/**
 * Identity API
 * The Identity API provides an OIDC compliant interface for use with all official and 3rd party services and proxies.  As its intended use is for multi-tenant cloud deployments, it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.  Token introspection forms the basis of role based access control across all APIs.  For security purposes, access tokens and refresh tokens are limited to a single session per client, thus if they are being consumed by a horizontally scalable platform care must be taken to ensure token rotation is handled atomically by a single process, and the tokens are distributed to each service instance synchronously.
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrganizationType } from './OrganizationType';
import {
    OrganizationTypeFromJSON,
    OrganizationTypeFromJSONTyped,
    OrganizationTypeToJSON,
} from './OrganizationType';
import type { ProviderScope } from './ProviderScope';
import {
    ProviderScopeFromJSON,
    ProviderScopeFromJSONTyped,
    ProviderScopeToJSON,
} from './ProviderScope';

/**
 * An organization.
 * @export
 * @interface OrganizationSpec
 */
export interface OrganizationSpec {
    /**
     * 
     * @type {OrganizationType}
     * @memberof OrganizationSpec
     */
    organizationType: OrganizationType;
    /**
     * The email domain of the organization.
     * @type {string}
     * @memberof OrganizationSpec
     */
    domain?: string;
    /**
     * 
     * @type {ProviderScope}
     * @memberof OrganizationSpec
     */
    providerScope?: ProviderScope;
    /**
     * The ID of the provider to use, the scope is determined by useCustomProvider.
     * If false, this refers to a built in provider, if true, then to an organization
     * specific one.
     * @type {string}
     * @memberof OrganizationSpec
     */
    providerID?: string;
    /**
     * When set this identifies the customer ID for the google managed organization.
     * This field is currently unused.
     * @type {string}
     * @memberof OrganizationSpec
     */
    googleCustomerID?: string;
}

/**
 * Check if a given object implements the OrganizationSpec interface.
 */
export function instanceOfOrganizationSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "organizationType" in value;

    return isInstance;
}

export function OrganizationSpecFromJSON(json: any): OrganizationSpec {
    return OrganizationSpecFromJSONTyped(json, false);
}

export function OrganizationSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'organizationType': OrganizationTypeFromJSON(json['organizationType']),
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'providerScope': !exists(json, 'providerScope') ? undefined : ProviderScopeFromJSON(json['providerScope']),
        'providerID': !exists(json, 'providerID') ? undefined : json['providerID'],
        'googleCustomerID': !exists(json, 'googleCustomerID') ? undefined : json['googleCustomerID'],
    };
}

export function OrganizationSpecToJSON(value?: OrganizationSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'organizationType': OrganizationTypeToJSON(value.organizationType),
        'domain': value.domain,
        'providerScope': ProviderScopeToJSON(value.providerScope),
        'providerID': value.providerID,
        'googleCustomerID': value.googleCustomerID,
    };
}

