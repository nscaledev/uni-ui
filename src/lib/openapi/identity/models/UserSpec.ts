/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserState } from './UserState';
import {
    UserStateFromJSON,
    UserStateFromJSONTyped,
    UserStateToJSON,
} from './UserState';

/**
 * A user specification.
 * @export
 * @interface UserSpec
 */
export interface UserSpec {
    /**
     * The uers's canonical name, usually an email address.
     * @type {string}
     * @memberof UserSpec
     */
    subject: string;
    /**
     * 
     * @type {UserState}
     * @memberof UserSpec
     */
    state: UserState;
    /**
     * A list of group IDs.
     * @type {Array<string>}
     * @memberof UserSpec
     */
    groupIDs: Array<string>;
}

/**
 * Check if a given object implements the UserSpec interface.
 */
export function instanceOfUserSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "subject" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "groupIDs" in value;

    return isInstance;
}

export function UserSpecFromJSON(json: any): UserSpec {
    return UserSpecFromJSONTyped(json, false);
}

export function UserSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': json['subject'],
        'state': UserStateFromJSON(json['state']),
        'groupIDs': json['groupIDs'],
    };
}

export function UserSpecToJSON(value?: UserSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': value.subject,
        'state': UserStateToJSON(value.state),
        'groupIDs': value.groupIDs,
    };
}

