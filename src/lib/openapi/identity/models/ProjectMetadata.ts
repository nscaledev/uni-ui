/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Required metadata for projects.
 * @export
 * @interface ProjectMetadata
 */
export interface ProjectMetadata {
    /**
     * The time the resource was created.
     * @type {Date}
     * @memberof ProjectMetadata
     */
    creationTime: Date;
    /**
     * The time the resource was deleted.
     * @type {Date}
     * @memberof ProjectMetadata
     */
    deletionTime?: Date;
    /**
     * The current status of the resource. Intially the status will be "Unknown" until
     * the resource is reconciled by the relevant controller. It then will transition to
     * "Provisioning" and will be ready for use when it changes to "Provisioned". The status
     * will also transition to the "Provisioning" status during an update. The
     * status will change to "Deprovisioning" when a delete request is being processed.
     * It may also change to "Error" if an unexpected error occurred during any operation.
     * Errors may be transient.
     * @type {string}
     * @memberof ProjectMetadata
     */
    status: string;
}

/**
 * Check if a given object implements the ProjectMetadata interface.
 */
export function instanceOfProjectMetadata(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "creationTime" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ProjectMetadataFromJSON(json: any): ProjectMetadata {
    return ProjectMetadataFromJSONTyped(json, false);
}

export function ProjectMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'creationTime': (new Date(json['creationTime'])),
        'deletionTime': !exists(json, 'deletionTime') ? undefined : (new Date(json['deletionTime'])),
        'status': json['status'],
    };
}

export function ProjectMetadataToJSON(value?: ProjectMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'creationTime': (value.creationTime.toISOString()),
        'deletionTime': value.deletionTime === undefined ? undefined : (value.deletionTime.toISOString()),
        'status': value.status,
    };
}

