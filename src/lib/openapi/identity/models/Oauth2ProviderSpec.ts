/* tslint:disable */
/* eslint-disable */
/**
 * Unikorn Identity API
 * The Unikorn Identity API provides an OIDC compliant interface for use with all Unikorn services and proxies.  As it\'s intended use is for multi-tenant cloud deployments it acts as an aggregation layer for other 3rd party OIDC services, dispatching login requests to the required OIDC backend.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Oauth2ProviderType } from './Oauth2ProviderType';
import {
    Oauth2ProviderTypeFromJSON,
    Oauth2ProviderTypeFromJSONTyped,
    Oauth2ProviderTypeToJSON,
} from './Oauth2ProviderType';

/**
 * An oauth2 provider.
 * @export
 * @interface Oauth2ProviderSpec
 */
export interface Oauth2ProviderSpec {
    /**
     * 
     * @type {Oauth2ProviderType}
     * @memberof Oauth2ProviderSpec
     */
    type?: Oauth2ProviderType;
    /**
     * The OIDC issuer, typically where to perform auto discovery relative to.
     * @type {string}
     * @memberof Oauth2ProviderSpec
     */
    issuer: string;
    /**
     * The client identification, only shown for super admin or organization owned providers
     * that you are an admin for.
     * 
     * @type {string}
     * @memberof Oauth2ProviderSpec
     */
    clientID: string;
    /**
     * The client secret, only shown for super admin or organization owned providers
     * that you are an admin for.
     * 
     * @type {string}
     * @memberof Oauth2ProviderSpec
     */
    clientSecret?: string;
}

/**
 * Check if a given object implements the Oauth2ProviderSpec interface.
 */
export function instanceOfOauth2ProviderSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "issuer" in value;
    isInstance = isInstance && "clientID" in value;

    return isInstance;
}

export function Oauth2ProviderSpecFromJSON(json: any): Oauth2ProviderSpec {
    return Oauth2ProviderSpecFromJSONTyped(json, false);
}

export function Oauth2ProviderSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): Oauth2ProviderSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : Oauth2ProviderTypeFromJSON(json['type']),
        'issuer': json['issuer'],
        'clientID': json['clientID'],
        'clientSecret': !exists(json, 'clientSecret') ? undefined : json['clientSecret'],
    };
}

export function Oauth2ProviderSpecToJSON(value?: Oauth2ProviderSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': Oauth2ProviderTypeToJSON(value.type),
        'issuer': value.issuer,
        'clientID': value.clientID,
        'clientSecret': value.clientSecret,
    };
}

