/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Region Service API
 * Cloud region discovery and routing service.
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SecurityGroupRulePort } from './SecurityGroupRulePort';
import {
    SecurityGroupRulePortFromJSON,
    SecurityGroupRulePortFromJSONTyped,
    SecurityGroupRulePortToJSON,
} from './SecurityGroupRulePort';

/**
 * A security group rule's specification.
 * @export
 * @interface SecurityGroupRuleWriteSpec
 */
export interface SecurityGroupRuleWriteSpec {
    /**
     * The direction of the rule.
     * @type {string}
     * @memberof SecurityGroupRuleWriteSpec
     */
    direction: SecurityGroupRuleWriteSpecDirectionEnum;
    /**
     * The protocol to allow.
     * @type {string}
     * @memberof SecurityGroupRuleWriteSpec
     */
    protocol: SecurityGroupRuleWriteSpecProtocolEnum;
    /**
     * 
     * @type {SecurityGroupRulePort}
     * @memberof SecurityGroupRuleWriteSpec
     */
    port: SecurityGroupRulePort;
    /**
     * An IPv4 address.
     * @type {string}
     * @memberof SecurityGroupRuleWriteSpec
     */
    cidr: string;
}


/**
 * @export
 */
export const SecurityGroupRuleWriteSpecDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
} as const;
export type SecurityGroupRuleWriteSpecDirectionEnum = typeof SecurityGroupRuleWriteSpecDirectionEnum[keyof typeof SecurityGroupRuleWriteSpecDirectionEnum];

/**
 * @export
 */
export const SecurityGroupRuleWriteSpecProtocolEnum = {
    Tcp: 'tcp',
    Udp: 'udp'
} as const;
export type SecurityGroupRuleWriteSpecProtocolEnum = typeof SecurityGroupRuleWriteSpecProtocolEnum[keyof typeof SecurityGroupRuleWriteSpecProtocolEnum];


/**
 * Check if a given object implements the SecurityGroupRuleWriteSpec interface.
 */
export function instanceOfSecurityGroupRuleWriteSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "protocol" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "cidr" in value;

    return isInstance;
}

export function SecurityGroupRuleWriteSpecFromJSON(json: any): SecurityGroupRuleWriteSpec {
    return SecurityGroupRuleWriteSpecFromJSONTyped(json, false);
}

export function SecurityGroupRuleWriteSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecurityGroupRuleWriteSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'direction': json['direction'],
        'protocol': json['protocol'],
        'port': SecurityGroupRulePortFromJSON(json['port']),
        'cidr': json['cidr'],
    };
}

export function SecurityGroupRuleWriteSpecToJSON(value?: SecurityGroupRuleWriteSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'direction': value.direction,
        'protocol': value.protocol,
        'port': SecurityGroupRulePortToJSON(value.port),
        'cidr': value.cidr,
    };
}

