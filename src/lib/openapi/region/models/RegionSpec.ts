/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RegionFeatures } from './RegionFeatures';
import {
    RegionFeaturesFromJSON,
    RegionFeaturesFromJSONTyped,
    RegionFeaturesToJSON,
} from './RegionFeatures';
import type { RegionType } from './RegionType';
import {
    RegionTypeFromJSON,
    RegionTypeFromJSONTyped,
    RegionTypeToJSON,
} from './RegionType';

/**
 * Information about the region.
 * @export
 * @interface RegionSpec
 */
export interface RegionSpec {
    /**
     * 
     * @type {RegionType}
     * @memberof RegionSpec
     */
    type: RegionType;
    /**
     * 
     * @type {RegionFeatures}
     * @memberof RegionSpec
     */
    features: RegionFeatures;
}

/**
 * Check if a given object implements the RegionSpec interface.
 */
export function instanceOfRegionSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "features" in value;

    return isInstance;
}

export function RegionSpecFromJSON(json: any): RegionSpec {
    return RegionSpecFromJSONTyped(json, false);
}

export function RegionSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegionSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': RegionTypeFromJSON(json['type']),
        'features': RegionFeaturesFromJSON(json['features']),
    };
}

export function RegionSpecToJSON(value?: RegionSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': RegionTypeToJSON(value.type),
        'features': RegionFeaturesToJSON(value.features),
    };
}

