/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProjectScopedResourceReadMetadata } from './ProjectScopedResourceReadMetadata';
import {
    ProjectScopedResourceReadMetadataFromJSON,
    ProjectScopedResourceReadMetadataFromJSONTyped,
    ProjectScopedResourceReadMetadataToJSON,
} from './ProjectScopedResourceReadMetadata';
import type { ServerSpec } from './ServerSpec';
import {
    ServerSpecFromJSON,
    ServerSpecFromJSONTyped,
    ServerSpecToJSON,
} from './ServerSpec';
import type { ServerStatus } from './ServerStatus';
import {
    ServerStatusFromJSON,
    ServerStatusFromJSONTyped,
    ServerStatusToJSON,
} from './ServerStatus';

/**
 * A server.
 * @export
 * @interface ServerRead
 */
export interface ServerRead {
    /**
     * 
     * @type {ProjectScopedResourceReadMetadata}
     * @memberof ServerRead
     */
    metadata: ProjectScopedResourceReadMetadata;
    /**
     * 
     * @type {ServerSpec}
     * @memberof ServerRead
     */
    spec: ServerSpec;
    /**
     * 
     * @type {ServerStatus}
     * @memberof ServerRead
     */
    status: ServerStatus;
}

/**
 * Check if a given object implements the ServerRead interface.
 */
export function instanceOfServerRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "spec" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ServerReadFromJSON(json: any): ServerRead {
    return ServerReadFromJSONTyped(json, false);
}

export function ServerReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServerRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': ProjectScopedResourceReadMetadataFromJSON(json['metadata']),
        'spec': ServerSpecFromJSON(json['spec']),
        'status': ServerStatusFromJSON(json['status']),
    };
}

export function ServerReadToJSON(value?: ServerRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': ProjectScopedResourceReadMetadataToJSON(value.metadata),
        'spec': ServerSpecToJSON(value.spec),
        'status': ServerStatusToJSON(value.status),
    };
}

