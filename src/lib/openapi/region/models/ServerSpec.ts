/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ServerNetwork } from './ServerNetwork';
import {
    ServerNetworkFromJSON,
    ServerNetworkFromJSONTyped,
    ServerNetworkToJSON,
} from './ServerNetwork';
import type { ServerPublicIPAllocation } from './ServerPublicIPAllocation';
import {
    ServerPublicIPAllocationFromJSON,
    ServerPublicIPAllocationFromJSONTyped,
    ServerPublicIPAllocationToJSON,
} from './ServerPublicIPAllocation';
import type { ServerSecurityGroup } from './ServerSecurityGroup';
import {
    ServerSecurityGroupFromJSON,
    ServerSecurityGroupFromJSONTyped,
    ServerSecurityGroupToJSON,
} from './ServerSecurityGroup';

/**
 * A server's specification.
 * @export
 * @interface ServerSpec
 */
export interface ServerSpec {
    /**
     * The flavor of the server.
     * @type {string}
     * @memberof ServerSpec
     */
    flavorId: string;
    /**
     * The image of the server.
     * @type {string}
     * @memberof ServerSpec
     */
    imageId: string;
    /**
     * A list of security groups.
     * @type {Array<ServerSecurityGroup>}
     * @memberof ServerSpec
     */
    securityGroups?: Array<ServerSecurityGroup>;
    /**
     * 
     * @type {ServerPublicIPAllocation}
     * @memberof ServerSpec
     */
    publicIPAllocation?: ServerPublicIPAllocation;
    /**
     * A list of networks.
     * @type {Array<ServerNetwork>}
     * @memberof ServerSpec
     */
    networks: Array<ServerNetwork>;
    /**
     * UserData contains base64-encoded configuration information or scripts to use upon launch.
     * @type {string}
     * @memberof ServerSpec
     */
    userData?: string;
}

/**
 * Check if a given object implements the ServerSpec interface.
 */
export function instanceOfServerSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "flavorId" in value;
    isInstance = isInstance && "imageId" in value;
    isInstance = isInstance && "networks" in value;

    return isInstance;
}

export function ServerSpecFromJSON(json: any): ServerSpec {
    return ServerSpecFromJSONTyped(json, false);
}

export function ServerSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServerSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'flavorId': json['flavorId'],
        'imageId': json['imageId'],
        'securityGroups': !exists(json, 'securityGroups') ? undefined : ((json['securityGroups'] as Array<any>).map(ServerSecurityGroupFromJSON)),
        'publicIPAllocation': !exists(json, 'publicIPAllocation') ? undefined : ServerPublicIPAllocationFromJSON(json['publicIPAllocation']),
        'networks': ((json['networks'] as Array<any>).map(ServerNetworkFromJSON)),
        'userData': !exists(json, 'userData') ? undefined : json['userData'],
    };
}

export function ServerSpecToJSON(value?: ServerSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'flavorId': value.flavorId,
        'imageId': value.imageId,
        'securityGroups': value.securityGroups === undefined ? undefined : ((value.securityGroups as Array<any>).map(ServerSecurityGroupToJSON)),
        'publicIPAllocation': ServerPublicIPAllocationToJSON(value.publicIPAllocation),
        'networks': ((value.networks as Array<any>).map(ServerNetworkToJSON)),
        'userData': value.userData,
    };
}

