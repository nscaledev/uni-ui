/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Region Service API
 * Cloud region discovery and routing service.
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Tag } from './Tag';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
} from './Tag';

/**
 * A phyical network's specification.
 * @export
 * @interface PhysicalNetworkWriteSpec
 */
export interface PhysicalNetworkWriteSpec {
    /**
     * A list of tags.
     * @type {Array<Tag>}
     * @memberof PhysicalNetworkWriteSpec
     */
    tags?: Array<Tag>;
    /**
     * An IPv4 prefix for the network.
     * @type {string}
     * @memberof PhysicalNetworkWriteSpec
     */
    prefix: string;
    /**
     * A list of IPv4 addresses.
     * @type {Array<string>}
     * @memberof PhysicalNetworkWriteSpec
     */
    dnsNameservers: Array<string>;
}

/**
 * Check if a given object implements the PhysicalNetworkWriteSpec interface.
 */
export function instanceOfPhysicalNetworkWriteSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "prefix" in value;
    isInstance = isInstance && "dnsNameservers" in value;

    return isInstance;
}

export function PhysicalNetworkWriteSpecFromJSON(json: any): PhysicalNetworkWriteSpec {
    return PhysicalNetworkWriteSpecFromJSONTyped(json, false);
}

export function PhysicalNetworkWriteSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): PhysicalNetworkWriteSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tags': !exists(json, 'tags') ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
        'prefix': json['prefix'],
        'dnsNameservers': json['dnsNameservers'],
    };
}

export function PhysicalNetworkWriteSpecToJSON(value?: PhysicalNetworkWriteSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(TagToJSON)),
        'prefix': value.prefix,
        'dnsNameservers': value.dnsNameservers,
    };
}

