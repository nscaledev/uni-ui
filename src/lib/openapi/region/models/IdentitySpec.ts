/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IdentitySpecOpenStack } from './IdentitySpecOpenStack';
import {
    IdentitySpecOpenStackFromJSON,
    IdentitySpecOpenStackFromJSONTyped,
    IdentitySpecOpenStackToJSON,
} from './IdentitySpecOpenStack';
import type { RegionType } from './RegionType';
import {
    RegionTypeFromJSON,
    RegionTypeFromJSONTyped,
    RegionTypeToJSON,
} from './RegionType';

/**
 * A provider specific identity.
 * @export
 * @interface IdentitySpec
 */
export interface IdentitySpec {
    /**
     * 
     * @type {RegionType}
     * @memberof IdentitySpec
     */
    type: RegionType;
    /**
     * The region an identity is provisioned in.
     * @type {string}
     * @memberof IdentitySpec
     */
    regionId: string;
    /**
     * 
     * @type {IdentitySpecOpenStack}
     * @memberof IdentitySpec
     */
    openstack?: IdentitySpecOpenStack;
}

/**
 * Check if a given object implements the IdentitySpec interface.
 */
export function instanceOfIdentitySpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "regionId" in value;

    return isInstance;
}

export function IdentitySpecFromJSON(json: any): IdentitySpec {
    return IdentitySpecFromJSONTyped(json, false);
}

export function IdentitySpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentitySpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': RegionTypeFromJSON(json['type']),
        'regionId': json['regionId'],
        'openstack': !exists(json, 'openstack') ? undefined : IdentitySpecOpenStackFromJSON(json['openstack']),
    };
}

export function IdentitySpecToJSON(value?: IdentitySpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': RegionTypeToJSON(value.type),
        'regionId': value.regionId,
        'openstack': IdentitySpecOpenStackToJSON(value.openstack),
    };
}

