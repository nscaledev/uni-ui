/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Region Service API
 * Cloud region discovery and routing service.
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NetworkSpecOpenstack } from './NetworkSpecOpenstack';
import {
    NetworkSpecOpenstackFromJSON,
    NetworkSpecOpenstackFromJSONTyped,
    NetworkSpecOpenstackToJSON,
} from './NetworkSpecOpenstack';
import type { RegionType } from './RegionType';
import {
    RegionTypeFromJSON,
    RegionTypeFromJSONTyped,
    RegionTypeToJSON,
} from './RegionType';

/**
 * A phyical network's specification.
 * @export
 * @interface NetworkReadSpec
 */
export interface NetworkReadSpec {
    /**
     * An IPv4 prefix for the network.
     * @type {string}
     * @memberof NetworkReadSpec
     */
    prefix: string;
    /**
     * A list of IPv4 addresses.
     * @type {Array<string>}
     * @memberof NetworkReadSpec
     */
    dnsNameservers: Array<string>;
    /**
     * 
     * @type {RegionType}
     * @memberof NetworkReadSpec
     */
    type: RegionType;
    /**
     * The region an identity is provisioned in.
     * @type {string}
     * @memberof NetworkReadSpec
     */
    regionId: string;
    /**
     * 
     * @type {NetworkSpecOpenstack}
     * @memberof NetworkReadSpec
     */
    openstack?: NetworkSpecOpenstack;
}

/**
 * Check if a given object implements the NetworkReadSpec interface.
 */
export function instanceOfNetworkReadSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "prefix" in value;
    isInstance = isInstance && "dnsNameservers" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "regionId" in value;

    return isInstance;
}

export function NetworkReadSpecFromJSON(json: any): NetworkReadSpec {
    return NetworkReadSpecFromJSONTyped(json, false);
}

export function NetworkReadSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): NetworkReadSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'prefix': json['prefix'],
        'dnsNameservers': json['dnsNameservers'],
        'type': RegionTypeFromJSON(json['type']),
        'regionId': json['regionId'],
        'openstack': !exists(json, 'openstack') ? undefined : NetworkSpecOpenstackFromJSON(json['openstack']),
    };
}

export function NetworkReadSpecToJSON(value?: NetworkReadSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'prefix': value.prefix,
        'dnsNameservers': value.dnsNameservers,
        'type': RegionTypeToJSON(value.type),
        'regionId': value.regionId,
        'openstack': NetworkSpecOpenstackToJSON(value.openstack),
    };
}

