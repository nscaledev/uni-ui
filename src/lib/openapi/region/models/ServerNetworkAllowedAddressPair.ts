/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Allow multiple MAC/IP address (range) pairs to pass through this network port.
 * @export
 * @interface ServerNetworkAllowedAddressPair
 */
export interface ServerNetworkAllowedAddressPair {
    /**
     * The CIDR to allow.
     * @type {string}
     * @memberof ServerNetworkAllowedAddressPair
     */
    cidr: string;
    /**
     * The MAC address to allow.
     * @type {string}
     * @memberof ServerNetworkAllowedAddressPair
     */
    macAddress?: string;
}

/**
 * Check if a given object implements the ServerNetworkAllowedAddressPair interface.
 */
export function instanceOfServerNetworkAllowedAddressPair(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cidr" in value;

    return isInstance;
}

export function ServerNetworkAllowedAddressPairFromJSON(json: any): ServerNetworkAllowedAddressPair {
    return ServerNetworkAllowedAddressPairFromJSONTyped(json, false);
}

export function ServerNetworkAllowedAddressPairFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServerNetworkAllowedAddressPair {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cidr': json['cidr'],
        'macAddress': !exists(json, 'macAddress') ? undefined : json['macAddress'],
    };
}

export function ServerNetworkAllowedAddressPairToJSON(value?: ServerNetworkAllowedAddressPair | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cidr': value.cidr,
        'macAddress': value.macAddress,
    };
}

