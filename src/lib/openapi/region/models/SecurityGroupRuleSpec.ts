/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NetworkDirection } from './NetworkDirection';
import {
    NetworkDirectionFromJSON,
    NetworkDirectionFromJSONTyped,
    NetworkDirectionToJSON,
} from './NetworkDirection';
import type { NetworkProtocol } from './NetworkProtocol';
import {
    NetworkProtocolFromJSON,
    NetworkProtocolFromJSONTyped,
    NetworkProtocolToJSON,
} from './NetworkProtocol';
import type { SecurityGroupRulePort } from './SecurityGroupRulePort';
import {
    SecurityGroupRulePortFromJSON,
    SecurityGroupRulePortFromJSONTyped,
    SecurityGroupRulePortToJSON,
} from './SecurityGroupRulePort';

/**
 * A security group rule's specification.
 * @export
 * @interface SecurityGroupRuleSpec
 */
export interface SecurityGroupRuleSpec {
    /**
     * 
     * @type {NetworkDirection}
     * @memberof SecurityGroupRuleSpec
     */
    direction: NetworkDirection;
    /**
     * 
     * @type {NetworkProtocol}
     * @memberof SecurityGroupRuleSpec
     */
    protocol: NetworkProtocol;
    /**
     * 
     * @type {SecurityGroupRulePort}
     * @memberof SecurityGroupRuleSpec
     */
    port: SecurityGroupRulePort;
    /**
     * An IPv4 address.
     * @type {string}
     * @memberof SecurityGroupRuleSpec
     */
    cidr: string;
}

/**
 * Check if a given object implements the SecurityGroupRuleSpec interface.
 */
export function instanceOfSecurityGroupRuleSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "protocol" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "cidr" in value;

    return isInstance;
}

export function SecurityGroupRuleSpecFromJSON(json: any): SecurityGroupRuleSpec {
    return SecurityGroupRuleSpecFromJSONTyped(json, false);
}

export function SecurityGroupRuleSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecurityGroupRuleSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'direction': NetworkDirectionFromJSON(json['direction']),
        'protocol': NetworkProtocolFromJSON(json['protocol']),
        'port': SecurityGroupRulePortFromJSON(json['port']),
        'cidr': json['cidr'],
    };
}

export function SecurityGroupRuleSpecToJSON(value?: SecurityGroupRuleSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'direction': NetworkDirectionToJSON(value.direction),
        'protocol': NetworkProtocolToJSON(value.protocol),
        'port': SecurityGroupRulePortToJSON(value.port),
        'cidr': value.cidr,
    };
}

