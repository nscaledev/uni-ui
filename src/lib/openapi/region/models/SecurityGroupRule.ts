/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NetworkDirection } from './NetworkDirection';
import {
    NetworkDirectionFromJSON,
    NetworkDirectionFromJSONTyped,
    NetworkDirectionToJSON,
} from './NetworkDirection';
import type { NetworkProtocol } from './NetworkProtocol';
import {
    NetworkProtocolFromJSON,
    NetworkProtocolFromJSONTyped,
    NetworkProtocolToJSON,
} from './NetworkProtocol';
import type { SecurityGroupRulePort } from './SecurityGroupRulePort';
import {
    SecurityGroupRulePortFromJSON,
    SecurityGroupRulePortFromJSONTyped,
    SecurityGroupRulePortToJSON,
} from './SecurityGroupRulePort';

/**
 * A security group rule's specification.
 * @export
 * @interface SecurityGroupRule
 */
export interface SecurityGroupRule {
    /**
     * 
     * @type {NetworkDirection}
     * @memberof SecurityGroupRule
     */
    direction: NetworkDirection;
    /**
     * 
     * @type {NetworkProtocol}
     * @memberof SecurityGroupRule
     */
    protocol: NetworkProtocol;
    /**
     * 
     * @type {SecurityGroupRulePort}
     * @memberof SecurityGroupRule
     */
    port: SecurityGroupRulePort;
    /**
     * An IPv4 address.
     * @type {string}
     * @memberof SecurityGroupRule
     */
    cidr: string;
}

/**
 * Check if a given object implements the SecurityGroupRule interface.
 */
export function instanceOfSecurityGroupRule(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "protocol" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "cidr" in value;

    return isInstance;
}

export function SecurityGroupRuleFromJSON(json: any): SecurityGroupRule {
    return SecurityGroupRuleFromJSONTyped(json, false);
}

export function SecurityGroupRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecurityGroupRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'direction': NetworkDirectionFromJSON(json['direction']),
        'protocol': NetworkProtocolFromJSON(json['protocol']),
        'port': SecurityGroupRulePortFromJSON(json['port']),
        'cidr': json['cidr'],
    };
}

export function SecurityGroupRuleToJSON(value?: SecurityGroupRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'direction': NetworkDirectionToJSON(value.direction),
        'protocol': NetworkProtocolToJSON(value.protocol),
        'port': SecurityGroupRulePortToJSON(value.port),
        'cidr': value.cidr,
    };
}

