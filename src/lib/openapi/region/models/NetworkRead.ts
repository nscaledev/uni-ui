/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NetworkReadSpec } from './NetworkReadSpec';
import {
    NetworkReadSpecFromJSON,
    NetworkReadSpecFromJSONTyped,
    NetworkReadSpecToJSON,
} from './NetworkReadSpec';
import type { ProjectScopedResourceReadMetadata } from './ProjectScopedResourceReadMetadata';
import {
    ProjectScopedResourceReadMetadataFromJSON,
    ProjectScopedResourceReadMetadataFromJSONTyped,
    ProjectScopedResourceReadMetadataToJSON,
} from './ProjectScopedResourceReadMetadata';

/**
 * A network.
 * @export
 * @interface NetworkRead
 */
export interface NetworkRead {
    /**
     * 
     * @type {ProjectScopedResourceReadMetadata}
     * @memberof NetworkRead
     */
    metadata: ProjectScopedResourceReadMetadata;
    /**
     * 
     * @type {NetworkReadSpec}
     * @memberof NetworkRead
     */
    spec: NetworkReadSpec;
}

/**
 * Check if a given object implements the NetworkRead interface.
 */
export function instanceOfNetworkRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "spec" in value;

    return isInstance;
}

export function NetworkReadFromJSON(json: any): NetworkRead {
    return NetworkReadFromJSONTyped(json, false);
}

export function NetworkReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): NetworkRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': ProjectScopedResourceReadMetadataFromJSON(json['metadata']),
        'spec': NetworkReadSpecFromJSON(json['spec']),
    };
}

export function NetworkReadToJSON(value?: NetworkRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': ProjectScopedResourceReadMetadataToJSON(value.metadata),
        'spec': NetworkReadSpecToJSON(value.spec),
    };
}

