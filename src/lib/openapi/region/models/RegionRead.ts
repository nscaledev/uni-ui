/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RegionSpec } from './RegionSpec';
import {
    RegionSpecFromJSON,
    RegionSpecFromJSONTyped,
    RegionSpecToJSON,
} from './RegionSpec';
import type { ResourceReadMetadata } from './ResourceReadMetadata';
import {
    ResourceReadMetadataFromJSON,
    ResourceReadMetadataFromJSONTyped,
    ResourceReadMetadataToJSON,
} from './ResourceReadMetadata';

/**
 * A region.
 * @export
 * @interface RegionRead
 */
export interface RegionRead {
    /**
     * 
     * @type {ResourceReadMetadata}
     * @memberof RegionRead
     */
    metadata: ResourceReadMetadata;
    /**
     * 
     * @type {RegionSpec}
     * @memberof RegionRead
     */
    spec: RegionSpec;
}

/**
 * Check if a given object implements the RegionRead interface.
 */
export function instanceOfRegionRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "spec" in value;

    return isInstance;
}

export function RegionReadFromJSON(json: any): RegionRead {
    return RegionReadFromJSONTyped(json, false);
}

export function RegionReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegionRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': ResourceReadMetadataFromJSON(json['metadata']),
        'spec': RegionSpecFromJSON(json['spec']),
    };
}

export function RegionReadToJSON(value?: RegionRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': ResourceReadMetadataToJSON(value.metadata),
        'spec': RegionSpecToJSON(value.spec),
    };
}

