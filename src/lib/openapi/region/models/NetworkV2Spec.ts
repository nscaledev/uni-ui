/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A physical network's specification.
 * @export
 * @interface NetworkV2Spec
 */
export interface NetworkV2Spec {
    /**
     * An IPv4 prefix for the network.
     * @type {string}
     * @memberof NetworkV2Spec
     */
    prefix: string;
    /**
     * A list of IPv4 addresses.
     * @type {Array<string>}
     * @memberof NetworkV2Spec
     */
    dnsNameservers: Array<string>;
    /**
     * The region an identity is provisioned in.
     * @type {string}
     * @memberof NetworkV2Spec
     */
    regionId: string;
}

/**
 * Check if a given object implements the NetworkV2Spec interface.
 */
export function instanceOfNetworkV2Spec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "prefix" in value;
    isInstance = isInstance && "dnsNameservers" in value;
    isInstance = isInstance && "regionId" in value;

    return isInstance;
}

export function NetworkV2SpecFromJSON(json: any): NetworkV2Spec {
    return NetworkV2SpecFromJSONTyped(json, false);
}

export function NetworkV2SpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): NetworkV2Spec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'prefix': json['prefix'],
        'dnsNameservers': json['dnsNameservers'],
        'regionId': json['regionId'],
    };
}

export function NetworkV2SpecToJSON(value?: NetworkV2Spec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'prefix': value.prefix,
        'dnsNameservers': value.dnsNameservers,
        'regionId': value.regionId,
    };
}

