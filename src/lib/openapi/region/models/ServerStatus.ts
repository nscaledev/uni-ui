/* tslint:disable */
/* eslint-disable */
/**
 * Region Service API
 * Cloud region discovery and routing service.  This is service not intended for direct access by end users.  Region related functionality is typically exposed by higher level services e.g. Compute and Kubernetes, that provide subsets of resources that are compatible with that service.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLifecyclePhase } from './InstanceLifecyclePhase';
import {
    InstanceLifecyclePhaseFromJSON,
    InstanceLifecyclePhaseFromJSONTyped,
    InstanceLifecyclePhaseToJSON,
} from './InstanceLifecyclePhase';

/**
 * A server's status.
 * @export
 * @interface ServerStatus
 */
export interface ServerStatus {
    /**
     * 
     * @type {InstanceLifecyclePhase}
     * @memberof ServerStatus
     */
    phase: InstanceLifecyclePhase;
    /**
     * The private IP address of the server.
     * @type {string}
     * @memberof ServerStatus
     */
    privateIP?: string;
    /**
     * The public IP address of the server.
     * @type {string}
     * @memberof ServerStatus
     */
    publicIP?: string;
}

/**
 * Check if a given object implements the ServerStatus interface.
 */
export function instanceOfServerStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "phase" in value;

    return isInstance;
}

export function ServerStatusFromJSON(json: any): ServerStatus {
    return ServerStatusFromJSONTyped(json, false);
}

export function ServerStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServerStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'phase': InstanceLifecyclePhaseFromJSON(json['phase']),
        'privateIP': !exists(json, 'privateIP') ? undefined : json['privateIP'],
        'publicIP': !exists(json, 'publicIP') ? undefined : json['publicIP'],
    };
}

export function ServerStatusToJSON(value?: ServerStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'phase': InstanceLifecyclePhaseToJSON(value.phase),
        'privateIP': value.privateIP,
        'publicIP': value.publicIP,
    };
}

