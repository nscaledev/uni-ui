/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Region Service API
 * Cloud region discovery and routing service.
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExternalNetworks,
  Flavors,
  IdentityRead,
  IdentityWrite,
  Images,
  ModelError,
  Regions,
} from '../models/index';
import {
    ExternalNetworksFromJSON,
    ExternalNetworksToJSON,
    FlavorsFromJSON,
    FlavorsToJSON,
    IdentityReadFromJSON,
    IdentityReadToJSON,
    IdentityWriteFromJSON,
    IdentityWriteToJSON,
    ImagesFromJSON,
    ImagesToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    RegionsFromJSON,
    RegionsToJSON,
} from '../models/index';

export interface ApiV1RegionsRegionIDExternalnetworksGetRequest {
    regionID: string;
}

export interface ApiV1RegionsRegionIDFlavorsGetRequest {
    regionID: string;
}

export interface ApiV1RegionsRegionIDIdentitiesIdentityIDDeleteRequest {
    regionID: string;
    identityID: string;
}

export interface ApiV1RegionsRegionIDIdentitiesPostRequest {
    regionID: string;
    identityWrite: IdentityWrite;
}

export interface ApiV1RegionsRegionIDImagesGetRequest {
    regionID: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * List all regions.
     */
    async apiV1RegionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Regions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionsFromJSON(jsonValue));
    }

    /**
     * List all regions.
     */
    async apiV1RegionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Regions> {
        const response = await this.apiV1RegionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of external networks.
     */
    async apiV1RegionsRegionIDExternalnetworksGetRaw(requestParameters: ApiV1RegionsRegionIDExternalnetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExternalNetworks>> {
        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1RegionsRegionIDExternalnetworksGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/regions/{regionID}/externalnetworks`.replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExternalNetworksFromJSON(jsonValue));
    }

    /**
     * Get a list of external networks.
     */
    async apiV1RegionsRegionIDExternalnetworksGet(requestParameters: ApiV1RegionsRegionIDExternalnetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExternalNetworks> {
        const response = await this.apiV1RegionsRegionIDExternalnetworksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all compute flavors that the authenticated user has access to
     */
    async apiV1RegionsRegionIDFlavorsGetRaw(requestParameters: ApiV1RegionsRegionIDFlavorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flavors>> {
        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1RegionsRegionIDFlavorsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/regions/{regionID}/flavors`.replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlavorsFromJSON(jsonValue));
    }

    /**
     * Lists all compute flavors that the authenticated user has access to
     */
    async apiV1RegionsRegionIDFlavorsGet(requestParameters: ApiV1RegionsRegionIDFlavorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flavors> {
        const response = await this.apiV1RegionsRegionIDFlavorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an identity from the region.
     */
    async apiV1RegionsRegionIDIdentitiesIdentityIDDeleteRaw(requestParameters: ApiV1RegionsRegionIDIdentitiesIdentityIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1RegionsRegionIDIdentitiesIdentityIDDelete.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1RegionsRegionIDIdentitiesIdentityIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/regions/{regionID}/identities/{identityID}`.replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an identity from the region.
     */
    async apiV1RegionsRegionIDIdentitiesIdentityIDDelete(requestParameters: ApiV1RegionsRegionIDIdentitiesIdentityIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1RegionsRegionIDIdentitiesIdentityIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new identity in the region.
     */
    async apiV1RegionsRegionIDIdentitiesPostRaw(requestParameters: ApiV1RegionsRegionIDIdentitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityRead>> {
        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1RegionsRegionIDIdentitiesPost.');
        }

        if (requestParameters.identityWrite === null || requestParameters.identityWrite === undefined) {
            throw new runtime.RequiredError('identityWrite','Required parameter requestParameters.identityWrite was null or undefined when calling apiV1RegionsRegionIDIdentitiesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/regions/{regionID}/identities`.replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityWriteToJSON(requestParameters.identityWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityReadFromJSON(jsonValue));
    }

    /**
     * Create a new identity in the region.
     */
    async apiV1RegionsRegionIDIdentitiesPost(requestParameters: ApiV1RegionsRegionIDIdentitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityRead> {
        const response = await this.apiV1RegionsRegionIDIdentitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all compute images that the authenticated user has access to.
     */
    async apiV1RegionsRegionIDImagesGetRaw(requestParameters: ApiV1RegionsRegionIDImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Images>> {
        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1RegionsRegionIDImagesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/regions/{regionID}/images`.replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesFromJSON(jsonValue));
    }

    /**
     * Lists all compute images that the authenticated user has access to.
     */
    async apiV1RegionsRegionIDImagesGet(requestParameters: ApiV1RegionsRegionIDImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Images> {
        const response = await this.apiV1RegionsRegionIDImagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
