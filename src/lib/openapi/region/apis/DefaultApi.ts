/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Region Service API
 * Cloud region discovery and routing service.
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExternalNetwork,
  Flavor,
  IdentityRead,
  IdentityWrite,
  Image,
  ModelError,
  NetworkRead,
  NetworkWrite,
  QuotasSpec,
  RegionRead,
  SecurityGroupRead,
  SecurityGroupRuleRead,
  SecurityGroupRuleWrite,
  SecurityGroupWrite,
  ServerRead,
  ServerWrite,
} from '../models/index';
import {
    ExternalNetworkFromJSON,
    ExternalNetworkToJSON,
    FlavorFromJSON,
    FlavorToJSON,
    IdentityReadFromJSON,
    IdentityReadToJSON,
    IdentityWriteFromJSON,
    IdentityWriteToJSON,
    ImageFromJSON,
    ImageToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    NetworkReadFromJSON,
    NetworkReadToJSON,
    NetworkWriteFromJSON,
    NetworkWriteToJSON,
    QuotasSpecFromJSON,
    QuotasSpecToJSON,
    RegionReadFromJSON,
    RegionReadToJSON,
    SecurityGroupReadFromJSON,
    SecurityGroupReadToJSON,
    SecurityGroupRuleReadFromJSON,
    SecurityGroupRuleReadToJSON,
    SecurityGroupRuleWriteFromJSON,
    SecurityGroupRuleWriteToJSON,
    SecurityGroupWriteFromJSON,
    SecurityGroupWriteToJSON,
    ServerReadFromJSON,
    ServerReadToJSON,
    ServerWriteFromJSON,
    ServerWriteToJSON,
} from '../models/index';

export interface ApiV1OrganizationsOrganizationIDIdentitiesGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDNetworksGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDeleteRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGetRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDeleteRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    networkID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGetRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    networkID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPostRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    networkWrite?: NetworkWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGetRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPutRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    quotasSpec?: QuotasSpec;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPostRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    securityGroupWrite?: SecurityGroupWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDeleteRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    securityGroupID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGetRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    securityGroupID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPutRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    securityGroupID: string;
    securityGroupWrite?: SecurityGroupWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGetRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    securityGroupID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPostRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    securityGroupID: string;
    securityGroupRuleWrite?: SecurityGroupRuleWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDeleteRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    securityGroupID: string;
    ruleID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGetRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    securityGroupID: string;
    ruleID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPostRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    serverWrite?: ServerWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDeleteRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    serverID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGetRequest {
    organizationID: string;
    projectID: string;
    identityID: string;
    serverID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPostRequest {
    organizationID: string;
    projectID: string;
    identityWrite: IdentityWrite;
}

export interface ApiV1OrganizationsOrganizationIDRegionsGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDRegionsRegionIDExternalnetworksGetRequest {
    organizationID: string;
    regionID: string;
}

export interface ApiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRequest {
    organizationID: string;
    regionID: string;
}

export interface ApiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRequest {
    organizationID: string;
    regionID: string;
}

export interface ApiV1OrganizationsOrganizationIDSecuritygroupsGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDServersGetRequest {
    organizationID: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get all identites scoped to an organization.
     */
    async apiV1OrganizationsOrganizationIDIdentitiesGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDIdentitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdentityRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDIdentitiesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/identities`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdentityReadFromJSON));
    }

    /**
     * Get all identites scoped to an organization.
     */
    async apiV1OrganizationsOrganizationIDIdentitiesGet(requestParameters: ApiV1OrganizationsOrganizationIDIdentitiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdentityRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDIdentitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List networks.
     */
    async apiV1OrganizationsOrganizationIDNetworksGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDNetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NetworkRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDNetworksGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/networks`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NetworkReadFromJSON));
    }

    /**
     * List networks.
     */
    async apiV1OrganizationsOrganizationIDNetworksGet(requestParameters: ApiV1OrganizationsOrganizationIDNetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NetworkRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDNetworksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an identity and any resources associated with it.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDelete.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDelete.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an identity and any resources associated with it.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a single identity.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGet.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityReadFromJSON(jsonValue));
    }

    /**
     * Get a single identity.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a new network.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDelete.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDelete.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDelete.');
        }

        if (requestParameters.networkID === null || requestParameters.networkID === undefined) {
            throw new runtime.RequiredError('networkID','Required parameter requestParameters.networkID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/networks/{networkID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"networkID"}}`, encodeURIComponent(String(requestParameters.networkID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a new network.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a phyiscal network.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NetworkRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGet.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGet.');
        }

        if (requestParameters.networkID === null || requestParameters.networkID === undefined) {
            throw new runtime.RequiredError('networkID','Required parameter requestParameters.networkID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/networks/{networkID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"networkID"}}`, encodeURIComponent(String(requestParameters.networkID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkReadFromJSON(jsonValue));
    }

    /**
     * Get a phyiscal network.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NetworkRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksNetworkIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new network.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NetworkRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPost.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/networks`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NetworkWriteToJSON(requestParameters.networkWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkReadFromJSON(jsonValue));
    }

    /**
     * Create a new network.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NetworkRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDNetworksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A client-specific set of quotas for the identity.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuotasSpec>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGet.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/quotas`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuotasSpecFromJSON(jsonValue));
    }

    /**
     * A client-specific set of quotas for the identity.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuotasSpec> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set per-client quotas for the identity.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPutRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPut.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPut.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/quotas`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuotasSpecToJSON(requestParameters.quotasSpec),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set per-client quotas for the identity.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPut(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDQuotasPutRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new security group.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecurityGroupRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPost.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/securitygroups`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityGroupWriteToJSON(requestParameters.securityGroupWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityGroupReadFromJSON(jsonValue));
    }

    /**
     * Create a new security group.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecurityGroupRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a security group.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDelete.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDelete.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDelete.');
        }

        if (requestParameters.securityGroupID === null || requestParameters.securityGroupID === undefined) {
            throw new runtime.RequiredError('securityGroupID','Required parameter requestParameters.securityGroupID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/securitygroups/{securityGroupID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"securityGroupID"}}`, encodeURIComponent(String(requestParameters.securityGroupID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a security group.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a security group.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecurityGroupRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGet.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGet.');
        }

        if (requestParameters.securityGroupID === null || requestParameters.securityGroupID === undefined) {
            throw new runtime.RequiredError('securityGroupID','Required parameter requestParameters.securityGroupID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/securitygroups/{securityGroupID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"securityGroupID"}}`, encodeURIComponent(String(requestParameters.securityGroupID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityGroupReadFromJSON(jsonValue));
    }

    /**
     * Get a security group.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecurityGroupRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a security group.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPutRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPut.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPut.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPut.');
        }

        if (requestParameters.securityGroupID === null || requestParameters.securityGroupID === undefined) {
            throw new runtime.RequiredError('securityGroupID','Required parameter requestParameters.securityGroupID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/securitygroups/{securityGroupID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"securityGroupID"}}`, encodeURIComponent(String(requestParameters.securityGroupID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityGroupWriteToJSON(requestParameters.securityGroupWrite),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a security group.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPut(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDPutRaw(requestParameters, initOverrides);
    }

    /**
     * List security groups rules.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SecurityGroupRuleRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGet.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGet.');
        }

        if (requestParameters.securityGroupID === null || requestParameters.securityGroupID === undefined) {
            throw new runtime.RequiredError('securityGroupID','Required parameter requestParameters.securityGroupID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/securitygroups/{securityGroupID}/rules`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"securityGroupID"}}`, encodeURIComponent(String(requestParameters.securityGroupID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SecurityGroupRuleReadFromJSON));
    }

    /**
     * List security groups rules.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SecurityGroupRuleRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new security group rule.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecurityGroupRuleRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPost.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPost.');
        }

        if (requestParameters.securityGroupID === null || requestParameters.securityGroupID === undefined) {
            throw new runtime.RequiredError('securityGroupID','Required parameter requestParameters.securityGroupID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/securitygroups/{securityGroupID}/rules`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"securityGroupID"}}`, encodeURIComponent(String(requestParameters.securityGroupID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityGroupRuleWriteToJSON(requestParameters.securityGroupRuleWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityGroupRuleReadFromJSON(jsonValue));
    }

    /**
     * Create a new security group rule.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecurityGroupRuleRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a security group rule.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDelete.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDelete.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDelete.');
        }

        if (requestParameters.securityGroupID === null || requestParameters.securityGroupID === undefined) {
            throw new runtime.RequiredError('securityGroupID','Required parameter requestParameters.securityGroupID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDelete.');
        }

        if (requestParameters.ruleID === null || requestParameters.ruleID === undefined) {
            throw new runtime.RequiredError('ruleID','Required parameter requestParameters.ruleID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/securitygroups/{securityGroupID}/rules/{ruleID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"securityGroupID"}}`, encodeURIComponent(String(requestParameters.securityGroupID))).replace(`{${"ruleID"}}`, encodeURIComponent(String(requestParameters.ruleID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a security group rule.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a security group rule.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SecurityGroupRuleRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGet.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGet.');
        }

        if (requestParameters.securityGroupID === null || requestParameters.securityGroupID === undefined) {
            throw new runtime.RequiredError('securityGroupID','Required parameter requestParameters.securityGroupID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGet.');
        }

        if (requestParameters.ruleID === null || requestParameters.ruleID === undefined) {
            throw new runtime.RequiredError('ruleID','Required parameter requestParameters.ruleID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/securitygroups/{securityGroupID}/rules/{ruleID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"securityGroupID"}}`, encodeURIComponent(String(requestParameters.securityGroupID))).replace(`{${"ruleID"}}`, encodeURIComponent(String(requestParameters.ruleID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityGroupRuleReadFromJSON(jsonValue));
    }

    /**
     * Get a security group rule.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SecurityGroupRuleRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDSecuritygroupsSecurityGroupIDRulesRuleIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new server.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPost.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/servers`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServerWriteToJSON(requestParameters.serverWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerReadFromJSON(jsonValue));
    }

    /**
     * Create a new server.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a server.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDelete.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDelete.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDelete.');
        }

        if (requestParameters.serverID === null || requestParameters.serverID === undefined) {
            throw new runtime.RequiredError('serverID','Required parameter requestParameters.serverID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/servers/{serverID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"serverID"}}`, encodeURIComponent(String(requestParameters.serverID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a server.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a server.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGet.');
        }

        if (requestParameters.identityID === null || requestParameters.identityID === undefined) {
            throw new runtime.RequiredError('identityID','Required parameter requestParameters.identityID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGet.');
        }

        if (requestParameters.serverID === null || requestParameters.serverID === undefined) {
            throw new runtime.RequiredError('serverID','Required parameter requestParameters.serverID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities/{identityID}/servers/{serverID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"identityID"}}`, encodeURIComponent(String(requestParameters.identityID))).replace(`{${"serverID"}}`, encodeURIComponent(String(requestParameters.serverID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerReadFromJSON(jsonValue));
    }

    /**
     * Get a server.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesIdentityIDServersServerIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new identity in the region.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentityRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPost.');
        }

        if (requestParameters.identityWrite === null || requestParameters.identityWrite === undefined) {
            throw new runtime.RequiredError('identityWrite','Required parameter requestParameters.identityWrite was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/identities`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentityWriteToJSON(requestParameters.identityWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentityReadFromJSON(jsonValue));
    }

    /**
     * Create a new identity in the region.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentityRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDIdentitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all regions.
     */
    async apiV1OrganizationsOrganizationIDRegionsGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDRegionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RegionRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/regions`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegionReadFromJSON));
    }

    /**
     * List all regions.
     */
    async apiV1OrganizationsOrganizationIDRegionsGet(requestParameters: ApiV1OrganizationsOrganizationIDRegionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RegionRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDRegionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of external networks.
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDExternalnetworksGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDExternalnetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExternalNetwork>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDExternalnetworksGet.');
        }

        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDExternalnetworksGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/regions/{regionID}/externalnetworks`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExternalNetworkFromJSON));
    }

    /**
     * Get a list of external networks.
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDExternalnetworksGet(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDExternalnetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExternalNetwork>> {
        const response = await this.apiV1OrganizationsOrganizationIDRegionsRegionIDExternalnetworksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all compute flavors that the authenticated user has access to
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Flavor>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGet.');
        }

        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/regions/{regionID}/flavors`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlavorFromJSON));
    }

    /**
     * Lists all compute flavors that the authenticated user has access to
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGet(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Flavor>> {
        const response = await this.apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all compute images that the authenticated user has access to.
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Image>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGet.');
        }

        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/regions/{regionID}/images`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImageFromJSON));
    }

    /**
     * Lists all compute images that the authenticated user has access to.
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGet(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Image>> {
        const response = await this.apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List security groups.
     */
    async apiV1OrganizationsOrganizationIDSecuritygroupsGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDSecuritygroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SecurityGroupRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDSecuritygroupsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/securitygroups`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SecurityGroupReadFromJSON));
    }

    /**
     * List security groups.
     */
    async apiV1OrganizationsOrganizationIDSecuritygroupsGet(requestParameters: ApiV1OrganizationsOrganizationIDSecuritygroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SecurityGroupRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDSecuritygroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List servers.
     */
    async apiV1OrganizationsOrganizationIDServersGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDServersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServerRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDServersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/servers`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServerReadFromJSON));
    }

    /**
     * List servers.
     */
    async apiV1OrganizationsOrganizationIDServersGet(requestParameters: ApiV1OrganizationsOrganizationIDServersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServerRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDServersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
