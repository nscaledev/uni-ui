/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationDependencies } from './ApplicationDependencies';
import {
    ApplicationDependenciesFromJSON,
    ApplicationDependenciesFromJSONTyped,
    ApplicationDependenciesToJSON,
} from './ApplicationDependencies';
import type { ApplicationRecommends } from './ApplicationRecommends';
import {
    ApplicationRecommendsFromJSON,
    ApplicationRecommendsFromJSONTyped,
    ApplicationRecommendsToJSON,
} from './ApplicationRecommends';

/**
 * An application version.
 * @export
 * @interface ApplicationVersion
 */
export interface ApplicationVersion {
    /**
     * The application's Helm chart version.
     * @type {string}
     * @memberof ApplicationVersion
     */
    version: string;
    /**
     * 
     * @type {ApplicationDependencies}
     * @memberof ApplicationVersion
     */
    dependencies?: ApplicationDependencies;
    /**
     * 
     * @type {ApplicationRecommends}
     * @memberof ApplicationVersion
     */
    recommends?: ApplicationRecommends;
}

/**
 * Check if a given object implements the ApplicationVersion interface.
 */
export function instanceOfApplicationVersion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function ApplicationVersionFromJSON(json: any): ApplicationVersion {
    return ApplicationVersionFromJSONTyped(json, false);
}

export function ApplicationVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationVersion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'dependencies': !exists(json, 'dependencies') ? undefined : ApplicationDependenciesFromJSON(json['dependencies']),
        'recommends': !exists(json, 'recommends') ? undefined : ApplicationRecommendsFromJSON(json['recommends']),
    };
}

export function ApplicationVersionToJSON(value?: ApplicationVersion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'dependencies': ApplicationDependenciesToJSON(value.dependencies),
        'recommends': ApplicationRecommendsToJSON(value.recommends),
    };
}

