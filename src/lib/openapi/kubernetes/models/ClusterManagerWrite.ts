/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ResourceWriteMetadata } from './ResourceWriteMetadata';
import {
    ResourceWriteMetadataFromJSON,
    ResourceWriteMetadataFromJSONTyped,
    ResourceWriteMetadataToJSON,
} from './ResourceWriteMetadata';

/**
 * A cluster manager.
 * @export
 * @interface ClusterManagerWrite
 */
export interface ClusterManagerWrite {
    /**
     * 
     * @type {ResourceWriteMetadata}
     * @memberof ClusterManagerWrite
     */
    metadata: ResourceWriteMetadata;
}

/**
 * Check if a given object implements the ClusterManagerWrite interface.
 */
export function instanceOfClusterManagerWrite(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metadata" in value;

    return isInstance;
}

export function ClusterManagerWriteFromJSON(json: any): ClusterManagerWrite {
    return ClusterManagerWriteFromJSONTyped(json, false);
}

export function ClusterManagerWriteFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterManagerWrite {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': ResourceWriteMetadataFromJSON(json['metadata']),
    };
}

export function ClusterManagerWriteToJSON(value?: ClusterManagerWrite | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': ResourceWriteMetadataToJSON(value.metadata),
    };
}

