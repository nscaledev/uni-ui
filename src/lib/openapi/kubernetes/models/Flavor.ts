/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FlavorSpec } from './FlavorSpec';
import {
    FlavorSpecFromJSON,
    FlavorSpecFromJSONTyped,
    FlavorSpecToJSON,
} from './FlavorSpec';
import type { StaticResourceMetadata } from './StaticResourceMetadata';
import {
    StaticResourceMetadataFromJSON,
    StaticResourceMetadataFromJSONTyped,
    StaticResourceMetadataToJSON,
} from './StaticResourceMetadata';

/**
 * A flavor.
 * @export
 * @interface Flavor
 */
export interface Flavor {
    /**
     * 
     * @type {StaticResourceMetadata}
     * @memberof Flavor
     */
    metadata: StaticResourceMetadata;
    /**
     * 
     * @type {FlavorSpec}
     * @memberof Flavor
     */
    spec: FlavorSpec;
}

/**
 * Check if a given object implements the Flavor interface.
 */
export function instanceOfFlavor(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "spec" in value;

    return isInstance;
}

export function FlavorFromJSON(json: any): Flavor {
    return FlavorFromJSONTyped(json, false);
}

export function FlavorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Flavor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': StaticResourceMetadataFromJSON(json['metadata']),
        'spec': FlavorSpecFromJSON(json['spec']),
    };
}

export function FlavorToJSON(value?: Flavor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': StaticResourceMetadataToJSON(value.metadata),
        'spec': FlavorSpecToJSON(value.spec),
    };
}

