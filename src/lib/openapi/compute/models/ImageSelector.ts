/* tslint:disable */
/* eslint-disable */
/**
 * Compute Service API
 * The Compute Service API provides services that allows provisioning and life cycle management of Compute clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OsDistro } from './OsDistro';
import {
    OsDistroFromJSON,
    OsDistroFromJSONTyped,
    OsDistroToJSON,
} from './OsDistro';

/**
 * A server image selector.
 * @export
 * @interface ImageSelector
 */
export interface ImageSelector {
    /**
     * 
     * @type {OsDistro}
     * @memberof ImageSelector
     */
    distro: OsDistro;
    /**
     * The operating system variant.
     * @type {string}
     * @memberof ImageSelector
     */
    variant?: string;
    /**
     * The operating system version to use, if not defined it will use the latest.
     * @type {string}
     * @memberof ImageSelector
     */
    version?: string;
}

/**
 * Check if a given object implements the ImageSelector interface.
 */
export function instanceOfImageSelector(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "distro" in value;

    return isInstance;
}

export function ImageSelectorFromJSON(json: any): ImageSelector {
    return ImageSelectorFromJSONTyped(json, false);
}

export function ImageSelectorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageSelector {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'distro': OsDistroFromJSON(json['distro']),
        'variant': !exists(json, 'variant') ? undefined : json['variant'],
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function ImageSelectorToJSON(value?: ImageSelector | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'distro': OsDistroToJSON(value.distro),
        'variant': value.variant,
        'version': value.version,
    };
}

