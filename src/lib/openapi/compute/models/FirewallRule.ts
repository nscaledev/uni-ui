/* tslint:disable */
/* eslint-disable */
/**
 * Compute Service API
 * The Compute Service API provides services that allows provisioning and life cycle management of Compute clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A firewall rule applied to a workload pool.
 * @export
 * @interface FirewallRule
 */
export interface FirewallRule {
    /**
     * The direction of network traffic to apply the rule to.
     * @type {string}
     * @memberof FirewallRule
     */
    direction: FirewallRuleDirectionEnum;
    /**
     * The protocol to allow.
     * @type {string}
     * @memberof FirewallRule
     */
    protocol: FirewallRuleProtocolEnum;
    /**
     * The port to allow, or start of a port range.
     * @type {number}
     * @memberof FirewallRule
     */
    port: number;
    /**
     * The end of a port range, inclusive of this this port, if specified.
     * @type {number}
     * @memberof FirewallRule
     */
    portMax?: number;
    /**
     * A list of CIDR prefixes to allow, it might be any IPv4 or IPv6 in CIDR notation.
     * @type {Array<string>}
     * @memberof FirewallRule
     */
    prefixes: Array<string>;
}


/**
 * @export
 */
export const FirewallRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
} as const;
export type FirewallRuleDirectionEnum = typeof FirewallRuleDirectionEnum[keyof typeof FirewallRuleDirectionEnum];

/**
 * @export
 */
export const FirewallRuleProtocolEnum = {
    Tcp: 'tcp',
    Udp: 'udp'
} as const;
export type FirewallRuleProtocolEnum = typeof FirewallRuleProtocolEnum[keyof typeof FirewallRuleProtocolEnum];


/**
 * Check if a given object implements the FirewallRule interface.
 */
export function instanceOfFirewallRule(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "direction" in value;
    isInstance = isInstance && "protocol" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "prefixes" in value;

    return isInstance;
}

export function FirewallRuleFromJSON(json: any): FirewallRule {
    return FirewallRuleFromJSONTyped(json, false);
}

export function FirewallRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): FirewallRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'direction': json['direction'],
        'protocol': json['protocol'],
        'port': json['port'],
        'portMax': !exists(json, 'portMax') ? undefined : json['portMax'],
        'prefixes': json['prefixes'],
    };
}

export function FirewallRuleToJSON(value?: FirewallRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'direction': value.direction,
        'protocol': value.protocol,
        'port': value.port,
        'portMax': value.portMax,
        'prefixes': value.prefixes,
    };
}

