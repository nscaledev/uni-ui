/* tslint:disable */
/* eslint-disable */
/**
 * Compute Service API
 * The Compute Service API provides services that allows provisioning and life cycle management of Compute clusters.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ResourceProvisioningStatus } from './ResourceProvisioningStatus';
import {
    ResourceProvisioningStatusFromJSON,
    ResourceProvisioningStatusFromJSONTyped,
    ResourceProvisioningStatusToJSON,
} from './ResourceProvisioningStatus';

/**
 * Compute cluster machine status.
 * @export
 * @interface ComputeClusterMachineStatus
 */
export interface ComputeClusterMachineStatus {
    /**
     * Machine hostname.
     * @type {string}
     * @memberof ComputeClusterMachineStatus
     */
    hostname: string;
    /**
     * Machine image ID.
     * @type {string}
     * @memberof ComputeClusterMachineStatus
     */
    imageID: string;
    /**
     * Machine flavorID.
     * @type {string}
     * @memberof ComputeClusterMachineStatus
     */
    flavorID: string;
    /**
     * Machine private IP address.
     * @type {string}
     * @memberof ComputeClusterMachineStatus
     */
    privateIP?: string;
    /**
     * Machine public IP address.
     * @type {string}
     * @memberof ComputeClusterMachineStatus
     */
    publicIP?: string;
    /**
     * 
     * @type {ResourceProvisioningStatus}
     * @memberof ComputeClusterMachineStatus
     */
    status: ResourceProvisioningStatus;
}

/**
 * Check if a given object implements the ComputeClusterMachineStatus interface.
 */
export function instanceOfComputeClusterMachineStatus(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "hostname" in value;
    isInstance = isInstance && "imageID" in value;
    isInstance = isInstance && "flavorID" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ComputeClusterMachineStatusFromJSON(json: any): ComputeClusterMachineStatus {
    return ComputeClusterMachineStatusFromJSONTyped(json, false);
}

export function ComputeClusterMachineStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComputeClusterMachineStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hostname': json['hostname'],
        'imageID': json['imageID'],
        'flavorID': json['flavorID'],
        'privateIP': !exists(json, 'privateIP') ? undefined : json['privateIP'],
        'publicIP': !exists(json, 'publicIP') ? undefined : json['publicIP'],
        'status': ResourceProvisioningStatusFromJSON(json['status']),
    };
}

export function ComputeClusterMachineStatusToJSON(value?: ComputeClusterMachineStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hostname': value.hostname,
        'imageID': value.imageID,
        'flavorID': value.flavorID,
        'privateIP': value.privateIP,
        'publicIP': value.publicIP,
        'status': ResourceProvisioningStatusToJSON(value.status),
    };
}

