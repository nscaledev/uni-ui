/* tslint:disable */
/* eslint-disable */
/**
 * Compute Service API
 * The Compute Service API provides services that allows provisioning and life cycle management of Compute clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ComputeClusterSpec } from './ComputeClusterSpec';
import {
    ComputeClusterSpecFromJSON,
    ComputeClusterSpecFromJSONTyped,
    ComputeClusterSpecToJSON,
} from './ComputeClusterSpec';
import type { ComputeClusterStatus } from './ComputeClusterStatus';
import {
    ComputeClusterStatusFromJSON,
    ComputeClusterStatusFromJSONTyped,
    ComputeClusterStatusToJSON,
} from './ComputeClusterStatus';
import type { ProjectScopedResourceReadMetadata } from './ProjectScopedResourceReadMetadata';
import {
    ProjectScopedResourceReadMetadataFromJSON,
    ProjectScopedResourceReadMetadataFromJSONTyped,
    ProjectScopedResourceReadMetadataToJSON,
} from './ProjectScopedResourceReadMetadata';

/**
 * Compute cluster read.
 * @export
 * @interface ComputeClusterRead
 */
export interface ComputeClusterRead {
    /**
     * 
     * @type {ProjectScopedResourceReadMetadata}
     * @memberof ComputeClusterRead
     */
    metadata: ProjectScopedResourceReadMetadata;
    /**
     * 
     * @type {ComputeClusterSpec}
     * @memberof ComputeClusterRead
     */
    spec: ComputeClusterSpec;
    /**
     * 
     * @type {ComputeClusterStatus}
     * @memberof ComputeClusterRead
     */
    status?: ComputeClusterStatus;
}

/**
 * Check if a given object implements the ComputeClusterRead interface.
 */
export function instanceOfComputeClusterRead(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "spec" in value;

    return isInstance;
}

export function ComputeClusterReadFromJSON(json: any): ComputeClusterRead {
    return ComputeClusterReadFromJSONTyped(json, false);
}

export function ComputeClusterReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComputeClusterRead {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'metadata': ProjectScopedResourceReadMetadataFromJSON(json['metadata']),
        'spec': ComputeClusterSpecFromJSON(json['spec']),
        'status': !exists(json, 'status') ? undefined : ComputeClusterStatusFromJSON(json['status']),
    };
}

export function ComputeClusterReadToJSON(value?: ComputeClusterRead | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'metadata': ProjectScopedResourceReadMetadataToJSON(value.metadata),
        'spec': ComputeClusterSpecToJSON(value.spec),
        'status': ComputeClusterStatusToJSON(value.status),
    };
}

