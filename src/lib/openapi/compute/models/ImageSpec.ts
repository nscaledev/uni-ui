/* tslint:disable */
/* eslint-disable */
/**
 * Compute Service API
 * The Compute Service API provides services that allows provisioning and life cycle management of Compute clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageGpu } from './ImageGpu';
import {
    ImageGpuFromJSON,
    ImageGpuFromJSONTyped,
    ImageGpuToJSON,
} from './ImageGpu';
import type { ImageOS } from './ImageOS';
import {
    ImageOSFromJSON,
    ImageOSFromJSONTyped,
    ImageOSToJSON,
} from './ImageOS';
import type { ImageVirtualization } from './ImageVirtualization';
import {
    ImageVirtualizationFromJSON,
    ImageVirtualizationFromJSONTyped,
    ImageVirtualizationToJSON,
} from './ImageVirtualization';

/**
 * An image.
 * @export
 * @interface ImageSpec
 */
export interface ImageSpec {
    /**
     * Minimum disk size required to use the image in GiB.
     * @type {number}
     * @memberof ImageSpec
     */
    sizeGiB: number;
    /**
     * 
     * @type {ImageVirtualization}
     * @memberof ImageSpec
     */
    virtualization: ImageVirtualization;
    /**
     * 
     * @type {ImageOS}
     * @memberof ImageSpec
     */
    os: ImageOS;
    /**
     * Image preinstalled version version metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ImageSpec
     */
    softwareVersions?: { [key: string]: string; };
    /**
     * 
     * @type {ImageGpu}
     * @memberof ImageSpec
     */
    gpu?: ImageGpu;
}

/**
 * Check if a given object implements the ImageSpec interface.
 */
export function instanceOfImageSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sizeGiB" in value;
    isInstance = isInstance && "virtualization" in value;
    isInstance = isInstance && "os" in value;

    return isInstance;
}

export function ImageSpecFromJSON(json: any): ImageSpec {
    return ImageSpecFromJSONTyped(json, false);
}

export function ImageSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sizeGiB': json['sizeGiB'],
        'virtualization': ImageVirtualizationFromJSON(json['virtualization']),
        'os': ImageOSFromJSON(json['os']),
        'softwareVersions': !exists(json, 'softwareVersions') ? undefined : json['softwareVersions'],
        'gpu': !exists(json, 'gpu') ? undefined : ImageGpuFromJSON(json['gpu']),
    };
}

export function ImageSpecToJSON(value?: ImageSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sizeGiB': value.sizeGiB,
        'virtualization': ImageVirtualizationToJSON(value.virtualization),
        'os': ImageOSToJSON(value.os),
        'softwareVersions': value.softwareVersions,
        'gpu': ImageGpuToJSON(value.gpu),
    };
}

