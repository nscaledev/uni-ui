/* tslint:disable */
/* eslint-disable */
/**
 * Compute Service API
 * The Compute Service API provides services that allows provisioning and life cycle management of Compute clusters.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComputeClusterRead,
  ComputeClusterWrite,
  EvictionWrite,
  Flavor,
  Image,
  ModelError,
  RegionRead,
} from '../models/index';
import {
    ComputeClusterReadFromJSON,
    ComputeClusterReadToJSON,
    ComputeClusterWriteFromJSON,
    ComputeClusterWriteToJSON,
    EvictionWriteFromJSON,
    EvictionWriteToJSON,
    FlavorFromJSON,
    FlavorToJSON,
    ImageFromJSON,
    ImageToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    RegionReadFromJSON,
    RegionReadToJSON,
} from '../models/index';

export interface ApiV1OrganizationsOrganizationIDClustersGetRequest {
    organizationID: string;
    tag?: Array<string>;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDeleteRequest {
    organizationID: string;
    projectID: string;
    clusterID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPostRequest {
    organizationID: string;
    projectID: string;
    clusterID: string;
    evictionWrite: EvictionWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGetRequest {
    organizationID: string;
    projectID: string;
    clusterID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPostRequest {
    organizationID: string;
    projectID: string;
    clusterID: string;
    machineID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPostRequest {
    organizationID: string;
    projectID: string;
    clusterID: string;
    machineID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPostRequest {
    organizationID: string;
    projectID: string;
    clusterID: string;
    machineID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPostRequest {
    organizationID: string;
    projectID: string;
    clusterID: string;
    machineID: string;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPutRequest {
    organizationID: string;
    projectID: string;
    clusterID: string;
    computeClusterWrite: ComputeClusterWrite;
}

export interface ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersPostRequest {
    organizationID: string;
    projectID: string;
    computeClusterWrite: ComputeClusterWrite;
}

export interface ApiV1OrganizationsOrganizationIDRegionsGetRequest {
    organizationID: string;
}

export interface ApiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRequest {
    organizationID: string;
    regionID: string;
}

export interface ApiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRequest {
    organizationID: string;
    regionID: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * List all clusters within the organization.
     */
    async apiV1OrganizationsOrganizationIDClustersGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDClustersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ComputeClusterRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDClustersGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.tag) {
            queryParameters['tag'] = requestParameters.tag.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/clusters`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ComputeClusterReadFromJSON));
    }

    /**
     * List all clusters within the organization.
     */
    async apiV1OrganizationsOrganizationIDClustersGet(requestParameters: ApiV1OrganizationsOrganizationIDClustersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ComputeClusterRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDClustersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDeleteRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDelete.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDelete.');
        }

        if (requestParameters.clusterID === null || requestParameters.clusterID === undefined) {
            throw new runtime.RequiredError('clusterID','Required parameter requestParameters.clusterID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters/{clusterID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"clusterID"}}`, encodeURIComponent(String(requestParameters.clusterID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDelete(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a set of machines from a cluster.  This will implicitly scale down the workload pools those machines were part of.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPost.');
        }

        if (requestParameters.clusterID === null || requestParameters.clusterID === undefined) {
            throw new runtime.RequiredError('clusterID','Required parameter requestParameters.clusterID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPost.');
        }

        if (requestParameters.evictionWrite === null || requestParameters.evictionWrite === undefined) {
            throw new runtime.RequiredError('evictionWrite','Required parameter requestParameters.evictionWrite was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters/{clusterID}/evict`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"clusterID"}}`, encodeURIComponent(String(requestParameters.clusterID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EvictionWriteToJSON(requestParameters.evictionWrite),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a set of machines from a cluster.  This will implicitly scale down the workload pools those machines were part of.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDEvictPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get a detailed view of the cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeClusterRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGet.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGet.');
        }

        if (requestParameters.clusterID === null || requestParameters.clusterID === undefined) {
            throw new runtime.RequiredError('clusterID','Required parameter requestParameters.clusterID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters/{clusterID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"clusterID"}}`, encodeURIComponent(String(requestParameters.clusterID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComputeClusterReadFromJSON(jsonValue));
    }

    /**
     * Get a detailed view of the cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGet(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeClusterRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Hard reboot a machine within a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPost.');
        }

        if (requestParameters.clusterID === null || requestParameters.clusterID === undefined) {
            throw new runtime.RequiredError('clusterID','Required parameter requestParameters.clusterID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPost.');
        }

        if (requestParameters.machineID === null || requestParameters.machineID === undefined) {
            throw new runtime.RequiredError('machineID','Required parameter requestParameters.machineID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters/{clusterID}/machines/{machineID}/hardreboot`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"clusterID"}}`, encodeURIComponent(String(requestParameters.clusterID))).replace(`{${"machineID"}}`, encodeURIComponent(String(requestParameters.machineID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Hard reboot a machine within a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDHardrebootPostRaw(requestParameters, initOverrides);
    }

    /**
     * Soft reboot a machine within a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPost.');
        }

        if (requestParameters.clusterID === null || requestParameters.clusterID === undefined) {
            throw new runtime.RequiredError('clusterID','Required parameter requestParameters.clusterID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPost.');
        }

        if (requestParameters.machineID === null || requestParameters.machineID === undefined) {
            throw new runtime.RequiredError('machineID','Required parameter requestParameters.machineID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters/{clusterID}/machines/{machineID}/softreboot`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"clusterID"}}`, encodeURIComponent(String(requestParameters.clusterID))).replace(`{${"machineID"}}`, encodeURIComponent(String(requestParameters.machineID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Soft reboot a machine within a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDSoftrebootPostRaw(requestParameters, initOverrides);
    }

    /**
     * Start a stopped machine within a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPost.');
        }

        if (requestParameters.clusterID === null || requestParameters.clusterID === undefined) {
            throw new runtime.RequiredError('clusterID','Required parameter requestParameters.clusterID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPost.');
        }

        if (requestParameters.machineID === null || requestParameters.machineID === undefined) {
            throw new runtime.RequiredError('machineID','Required parameter requestParameters.machineID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters/{clusterID}/machines/{machineID}/start`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"clusterID"}}`, encodeURIComponent(String(requestParameters.clusterID))).replace(`{${"machineID"}}`, encodeURIComponent(String(requestParameters.machineID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Start a stopped machine within a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStartPostRaw(requestParameters, initOverrides);
    }

    /**
     * Stop a running machine within a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPost.');
        }

        if (requestParameters.clusterID === null || requestParameters.clusterID === undefined) {
            throw new runtime.RequiredError('clusterID','Required parameter requestParameters.clusterID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPost.');
        }

        if (requestParameters.machineID === null || requestParameters.machineID === undefined) {
            throw new runtime.RequiredError('machineID','Required parameter requestParameters.machineID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters/{clusterID}/machines/{machineID}/stop`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"clusterID"}}`, encodeURIComponent(String(requestParameters.clusterID))).replace(`{${"machineID"}}`, encodeURIComponent(String(requestParameters.machineID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stop a running machine within a cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDMachinesMachineIDStopPostRaw(requestParameters, initOverrides);
    }

    /**
     * Update a cluster within the selected cluster manager.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPutRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPut.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPut.');
        }

        if (requestParameters.clusterID === null || requestParameters.clusterID === undefined) {
            throw new runtime.RequiredError('clusterID','Required parameter requestParameters.clusterID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPut.');
        }

        if (requestParameters.computeClusterWrite === null || requestParameters.computeClusterWrite === undefined) {
            throw new runtime.RequiredError('computeClusterWrite','Required parameter requestParameters.computeClusterWrite was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters/{clusterID}`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))).replace(`{${"clusterID"}}`, encodeURIComponent(String(requestParameters.clusterID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComputeClusterWriteToJSON(requestParameters.computeClusterWrite),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a cluster within the selected cluster manager.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPut(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersClusterIDPutRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersPostRaw(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeClusterRead>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersPost.');
        }

        if (requestParameters.projectID === null || requestParameters.projectID === undefined) {
            throw new runtime.RequiredError('projectID','Required parameter requestParameters.projectID was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersPost.');
        }

        if (requestParameters.computeClusterWrite === null || requestParameters.computeClusterWrite === undefined) {
            throw new runtime.RequiredError('computeClusterWrite','Required parameter requestParameters.computeClusterWrite was null or undefined when calling apiV1OrganizationsOrganizationIDProjectsProjectIDClustersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/projects/{projectID}/clusters`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"projectID"}}`, encodeURIComponent(String(requestParameters.projectID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComputeClusterWriteToJSON(requestParameters.computeClusterWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComputeClusterReadFromJSON(jsonValue));
    }

    /**
     * Creates a new cluster.
     */
    async apiV1OrganizationsOrganizationIDProjectsProjectIDClustersPost(requestParameters: ApiV1OrganizationsOrganizationIDProjectsProjectIDClustersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeClusterRead> {
        const response = await this.apiV1OrganizationsOrganizationIDProjectsProjectIDClustersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists compute service compatible regions.
     */
    async apiV1OrganizationsOrganizationIDRegionsGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDRegionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RegionRead>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/regions`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegionReadFromJSON));
    }

    /**
     * Lists compute service compatible regions.
     */
    async apiV1OrganizationsOrganizationIDRegionsGet(requestParameters: ApiV1OrganizationsOrganizationIDRegionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RegionRead>> {
        const response = await this.apiV1OrganizationsOrganizationIDRegionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all compute compatible flavors that the user has access to.
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Flavor>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGet.');
        }

        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/regions/{regionID}/flavors`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlavorFromJSON));
    }

    /**
     * Lists all compute compatible flavors that the user has access to.
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGet(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Flavor>> {
        const response = await this.apiV1OrganizationsOrganizationIDRegionsRegionIDFlavorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all compute compatible images that the user has access to.
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRaw(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Image>>> {
        if (requestParameters.organizationID === null || requestParameters.organizationID === undefined) {
            throw new runtime.RequiredError('organizationID','Required parameter requestParameters.organizationID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGet.');
        }

        if (requestParameters.regionID === null || requestParameters.regionID === undefined) {
            throw new runtime.RequiredError('regionID','Required parameter requestParameters.regionID was null or undefined when calling apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2Authentication", []);
        }

        const response = await this.request({
            path: `/api/v1/organizations/{organizationID}/regions/{regionID}/images`.replace(`{${"organizationID"}}`, encodeURIComponent(String(requestParameters.organizationID))).replace(`{${"regionID"}}`, encodeURIComponent(String(requestParameters.regionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImageFromJSON));
    }

    /**
     * Lists all compute compatible images that the user has access to.
     */
    async apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGet(requestParameters: ApiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Image>> {
        const response = await this.apiV1OrganizationsOrganizationIDRegionsRegionIDImagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
