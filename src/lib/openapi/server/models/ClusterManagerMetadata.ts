/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes Service API
 * The Kubernetes Service API provides services that allows provisioning and life cycle management of Kubernetes clusters. The API is logically composed of authentication services, platform provider specific calls to get a set of resource types that can be then used by abstract Kubernetes Service resources to create and manage Kubernetes clusters. Requests must specify the HTML content type header.
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Required metadata for cluster managers.
 * @export
 * @interface ClusterManagerMetadata
 */
export interface ClusterManagerMetadata {
    /**
     * Where the resource is related to a project, this is populated.
     * @type {string}
     * @memberof ClusterManagerMetadata
     */
    project: string;
    /**
     * The time the resource was created.
     * @type {Date}
     * @memberof ClusterManagerMetadata
     */
    creationTime: Date;
    /**
     * The time the resource was deleted.
     * @type {Date}
     * @memberof ClusterManagerMetadata
     */
    deletionTime?: Date;
    /**
     * The current status of the resource. Intially the status will be "Unknown" until
     * the resource is reconciled by the relevant controller. It then will transition to
     * "Provisioning" and will be ready for use when it changes to "Provisioned". The status
     * will also transition to the "Provisioning" status during an update. The
     * status will change to "Deprovisioning" when a delete request is being processed.
     * It may also change to "Error" if an unexpected error occurred during any operation.
     * Errors may be transient.
     * @type {string}
     * @memberof ClusterManagerMetadata
     */
    status: string;
}

/**
 * Check if a given object implements the ClusterManagerMetadata interface.
 */
export function instanceOfClusterManagerMetadata(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "project" in value;
    isInstance = isInstance && "creationTime" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function ClusterManagerMetadataFromJSON(json: any): ClusterManagerMetadata {
    return ClusterManagerMetadataFromJSONTyped(json, false);
}

export function ClusterManagerMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClusterManagerMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'project': json['project'],
        'creationTime': (new Date(json['creationTime'])),
        'deletionTime': !exists(json, 'deletionTime') ? undefined : (new Date(json['deletionTime'])),
        'status': json['status'],
    };
}

export function ClusterManagerMetadataToJSON(value?: ClusterManagerMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'project': value.project,
        'creationTime': (value.creationTime.toISOString()),
        'deletionTime': value.deletionTime === undefined ? undefined : (value.deletionTime.toISOString()),
        'status': value.status,
    };
}

