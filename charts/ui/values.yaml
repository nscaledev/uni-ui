# Set the global container repo.
repository: ghcr.io

# Set the global container repo organization.
organization: unikorn-cloud

# Set the global container tag.
# Defaults to the chart revision, which should be in lock-step with the
# actual release.
# tag:

# Set the docker configuration, doing so will create a secret and link it
# to the service accounts of all the controllers.  You can do something like:
# --set dockerConfig=$(cat ~/.docker/config.json | base64 -w0)
dockerConfig:

# Set the image pull secret on the service accounts of all the controllers.
# This is an alternative to dockerConfigs, but unlikely to play ball with
# ArgoCD as it's a foreign object that needs pruning.
imagePullSecret:

# Allows override of the global default image.
image:

# What DNS name I have.
ui:
  host: console.unikorn-cloud.org

identity:
  # The API's hostname.
  host: identity.unikorn-cloud.org

region:
  # The API's hostname.
  host: region.unikorn-cloud.org

kubernetes:
  # The API's hostname.
  host: kubernetes.unikorn-cloud.org

application:
  # The API's hostname.
  host: application.unikorn-cloud.org

compute:
  # The API's hostname.
  host: compute.unikorn-cloud.org

oauth2:
  # The client identifier assigned to this application.
  clientID: 3fc34852-9186-4884-b580-78bf4bcf628a
  # The client secret.
  clientSecret: yoz}wepat4Shmy
  # The client name, which can be shared with the identity configuration
  # and then hashed into a predictlable ID.  Overrides the ID.
  # clientName: foo

tls:
  # When marked as private, this will mount the ingress secret into the
  # pod and expose the CA certificate to Node.
  private: false

ingress:
  # Sets the ingress class to use.
  class: ~
  # Cert Manager certificate issuer to use.  If not specified it will generate a self signed one.
  issuer: ~
  # clusterIssuer to use.
  clusterIssuer: unikorn-issuer
  # If true, will add the external DNS hostname annotation.
  externalDns: false
